// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ exportfsm.csv –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–∏—Å–∫–æ–≤

const fs = require('fs');
const path = require('path');
const iconv = require('iconv-lite');

class CSVPhraseParser {
  constructor() {
    this.blockedPhrases = new Set();
    this.stopWords = new Set([
      // –°–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
      '–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–ø–æ–¥', '–Ω–∞–¥', '–º–µ–∂–¥—É', '—á–µ—Ä–µ–∑',
      '–∑–∞', '–±–µ–∑', '–∏–∑', '–ø—Ä–∏', '–ø—Ä–æ', '–æ', '–æ–±', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞',
      '–∫–æ—Ç–æ—Ä—ã–π', '–∫–æ—Ç–æ—Ä–∞—è', '–∫–æ—Ç–æ—Ä–æ–µ', '–∫–æ—Ç–æ—Ä—ã–µ', '—ç—Ç–æ—Ç', '—ç—Ç–∞', '—ç—Ç–æ', '—ç—Ç–∏',
      '—Ç–æ—Ç', '—Ç–∞', '—Ç–æ', '—Ç–µ', '—Ç–∞–∫–æ–π', '—Ç–∞–∫–∞—è', '—Ç–∞–∫–æ–µ', '—Ç–∞–∫–∏–µ',
      
      // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
      '—Ä–µ—à–µ–Ω–∏–µ–º', '—Ä–µ—à–µ–Ω–∏–µ', '—Å—É–¥', '—Å—É–¥–∞', '—Å—É–¥–æ–º', '–∞–ø–µ–ª–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ', '–∫—Ä–∞–µ–≤–æ–≥–æ',
      '–æ–±–ª–∞—Å—Ç–Ω–æ–≥–æ', '–≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ', '—Ä–∞–π–æ–Ω–Ω–æ–≥–æ', '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º',
      '–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º', '–ø—Ä–∏–≥–æ–≤–æ—Ä–æ–º', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', '–ø—Ä–∏–≥–æ–≤–æ—Ä',
      '–ø—Ä–∏–∑–Ω–∞–Ω', '–ø—Ä–∏–∑–Ω–∞–Ω–∞', '–ø—Ä–∏–∑–Ω–∞–Ω–æ', '–ø—Ä–∏–∑–Ω–∞–Ω—ã', '–≤–∫–ª—é—á–µ–Ω', '–≤–∫–ª—é—á–µ–Ω–∞', 
      '–≤–∫–ª—é—á–µ–Ω–æ', '–≤–∫–ª—é—á–µ–Ω—ã', '–≤–Ω–µ—Å–µ–Ω', '–≤–Ω–µ—Å–µ–Ω–∞', '–≤–Ω–µ—Å–µ–Ω–æ', '–≤–Ω–µ—Å–µ–Ω—ã',
      '–∑–∞–ø—Ä–µ—â–µ–Ω', '–∑–∞–ø—Ä–µ—â–µ–Ω–∞', '–∑–∞–ø—Ä–µ—â–µ–Ω–æ', '–∑–∞–ø—Ä–µ—â–µ–Ω—ã',
      
      // –ò–∑–¥–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
      '–Ω–æ–º–µ—Ä', '–∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–∞–≤—Ç–æ—Ä', '–∞–≤—Ç–æ—Ä—ã', '—Å–µ—Ä–∏—è', '—Ç–æ–º', '–≤—ã–ø—É—Å–∫', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞',
      '–∏–∑–¥–∞–Ω–∏–µ', '–∏–∑–¥–∞–Ω–∏—è', '–∫–Ω–∏–≥–∞', '–∫–Ω–∏–≥–∏', '—Å—Ç–∞—Ç—å—è', '—Å—Ç–∞—Ç—å–∏', '–º–∞—Ç–µ—Ä–∏–∞–ª', '–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      '–ø—É–±–ª–∏–∫–∞—Ü–∏—è', '–ø—É–±–ª–∏–∫–∞—Ü–∏–∏', '—Ç–µ–∫—Å—Ç', '—Ç–µ–∫—Å—Ç—ã', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', '—Å–æ–¥–µ—Ä–∂–∞—â–∏–π',
      '–∏–∑–¥–∞–Ω', '–∏–∑–¥–∞–Ω–∞', '–∏–∑–¥–∞–Ω–æ', '–∏–∑–¥–∞–Ω—ã', '–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω', '–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞',
      
      // –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ –∑–Ω–∞–∫–∏
      '‚Ññ', '—Å—Ç—Ä.', '–∏–∑–¥.', '—Ä–µ–¥.', '–≥–æ–¥', '—Å–º.', '—Ç–∞–∫–∂–µ', 'etc', '–∏.–æ.', '—Ç.–¥.',
      '—Ç.–ø.', '—Ç.–∫.', '—Ç.–µ.', '–¥—Ä.', '–ø—Ä–æ—á.', '—É–ª.', '–≥.', '–æ–±–ª.', '—Ä-–Ω',
      
      // –î–∞—Ç—ã –∏ —á–∏—Å–ª–∞
      '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
      '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ]);
    
    this.categories = {
      books: new Set(),
      websites: new Set(), 
      magazines: new Set(),
      videos: new Set(),
      organizations: new Set(),
      general: new Set()
    };
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ CSV —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ Windows-1251
  parseCSVFile(filePath) {
    try {
      console.log('üìÇ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π Windows-1251...');
      
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±—É—Ñ–µ—Ä –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ Windows-1251
      const buffer = fs.readFileSync(filePath);
      const csvContent = iconv.decode(buffer, 'win1251');
      
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –∏–∑ Windows-1251');
      console.log(`üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${buffer.length} –±–∞–π—Ç`);
      
      const lines = csvContent.split('\n');
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lines.length} —Å—Ç—Ä–æ–∫ –≤ CSV —Ñ–∞–π–ª–µ`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
      console.log('\nüîç –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:');
      for (let i = 0; i < Math.min(3, lines.length); i++) {
        const preview = lines[i].substring(0, 100);
        console.log(`   ${i + 1}: ${preview}${lines[i].length > 100 ? '...' : ''}`);
      }
      
      let processedCount = 0;
      let errorCount = 0;
      
      for (let i = 1; i < lines.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const line = lines[i].trim();
        if (!line) continue;
        
        try {
          const parsed = this.parseCSVLine(line);
          if (parsed && parsed.description) {
            this.extractPhrasesFromDescription(parsed.description, parsed.id);
            processedCount++;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π
            if (processedCount % 1000 === 0) {
              console.log(`‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –∑–∞–ø–∏—Å–µ–π...`);
            }
          }
        } catch (error) {
          errorCount++;
          if (errorCount <= 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i}: ${error.message}`);
          }
        }
      }
      
      console.log(`\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:`);
      console.log(`   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${processedCount}`);
      console.log(`   ‚ùå –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${errorCount}`);
      console.log(`   üî§ –ò–∑–≤–ª–µ—á–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑: ${this.blockedPhrases.size}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞:', error);
      if (error.code === 'ENOENT') {
        console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª exportfsm.csv –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ');
      }
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ CSV (—É—á–∏—Ç—ã–≤–∞—è –∫–∞–≤—ã—á–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ –≤–Ω—É—Ç—Ä–∏, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
  parseCSVLine(line) {
    const fields = [];
    let current = '';
    let inQuotes = false;
    let quoteChar = '';
    
    for (let i = 0; i < line.length; i++) {
      const char = line[i];
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–∞–≤—ã—á–µ–∫ (–≤–∫–ª—é—á–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–µ)
      if ((char === '"' || char === '"' || char === '"' || char === '¬´' || char === '¬ª') && !inQuotes) {
        inQuotes = true;
        quoteChar = char;
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫—É –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
      } else if ((char === quoteChar || 
                 (quoteChar === '¬´' && char === '¬ª') || 
                 (quoteChar === '"' && (char === '"' || char === '"'))) && inQuotes) {
        inQuotes = false;
        quoteChar = '';
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫—É –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
      } else if (char === ';' && !inQuotes) {
        fields.push(current.trim());
        current = '';
      } else {
        current += char;
      }
    }
    
    if (current) {
      fields.push(current.trim());
    }
    
    if (fields.length >= 2) {
      return {
        id: fields[0],
        description: this.cleanText(fields[1]),
        date: fields[2] || ''
      };
    }
    
    return null;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  cleanText(text) {
    if (!text) return '';
    
    return text
      .replace(/[""¬´¬ª]/g, '"')  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏
      .replace(/['']/g, "'")    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
      .replace(/\s+/g, ' ')     // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/[\r\n]+/g, ' ') // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      .trim();
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—Ä–∞–∑ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
  extractPhrasesFromDescription(description, id) {
    if (!description || description.length < 3) return;
    
    // –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    let cleanDesc = description
      .replace(/[""¬´¬ª]/g, '"')
      .replace(/['']/g, "'")
      .replace(/\s+/g, ' ')
      .trim();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö (–∫–Ω–∏–≥–∏, —Å—Ç–∞—Ç—å–∏, —Ñ–∏–ª—å–º—ã)
    const quotedMatches = cleanDesc.match(/"([^"]+)"/g);
    if (quotedMatches) {
      quotedMatches.forEach(match => {
        const phrase = match.replace(/"/g, '').trim();
        if (this.isValidPhrase(phrase)) {
          this.addPhrase(phrase, this.categorizePhrase(phrase, cleanDesc));
        }
      });
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏ –¥–æ–º–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
    const urlMatches = cleanDesc.match(/(?:https?:\/\/)?(?:www\.)?([a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,})/g);
    if (urlMatches) {
      urlMatches.forEach(url => {
        const cleanUrl = url.replace(/^https?:\/\//, '').replace(/^www\./, '');
        this.addPhrase(cleanUrl, 'websites');
      });
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥, —Å—Ç–∞—Ç–µ–π –∏ –¥—Ä—É–≥–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const bookPatterns = [
      /–∫–Ω–∏–≥–∞[–∏\s]*[""]([^""]+)[""]?/gi,
      /—Å—Ç–∞—Ç—å—è[–∏\s]*[""]([^""]+)[""]?/gi,
      /–±—Ä–æ—à—é—Ä–∞[–∏\s]*[""]([^""]+)[""]?/gi,
      /—É—á–µ–±–Ω–∏–∫[–∏\s]*[""]([^""]+)[""]?/gi
    ];
    
    bookPatterns.forEach(pattern => {
      const matches = cleanDesc.match(pattern);
      if (matches) {
        matches.forEach(match => {
          const book = match.replace(/^(–∫–Ω–∏–≥–∞|—Å—Ç–∞—Ç—å—è|–±—Ä–æ—à—é—Ä–∞|—É—á–µ–±–Ω–∏–∫)[–∏\s]*/i, '').replace(/[""\s]/g, '').trim();
          if (this.isValidPhrase(book)) {
            this.addPhrase(book, 'books');
          }
        });
      }
    });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∂—É—Ä–Ω–∞–ª–æ–≤ –∏ –≥–∞–∑–µ—Ç
    const magazinePatterns = [
      /–∂—É—Ä–Ω–∞–ª[–∏\s]*[""]([^""]+)[""]?/gi,
      /–≥–∞–∑–µ—Ç–∞[–∏\s]*[""]([^""]+)[""]?/gi,
      /–∏–∑–¥–∞–Ω–∏–µ[–∏\s]*[""]([^""]+)[""]?/gi,
      /–±—é–ª–ª–µ—Ç–µ–Ω—å[–∏\s]*[""]([^""]+)[""]?/gi
    ];
    
    magazinePatterns.forEach(pattern => {
      const matches = cleanDesc.match(pattern);
      if (matches) {
        matches.forEach(match => {
          const magazine = match.replace(/^(–∂—É—Ä–Ω–∞–ª|–≥–∞–∑–µ—Ç–∞|–∏–∑–¥–∞–Ω–∏–µ|–±—é–ª–ª–µ—Ç–µ–Ω—å)[–∏\s]*/i, '').replace(/[""\s]/g, '').trim();
          if (this.isValidPhrase(magazine)) {
            this.addPhrase(magazine, 'magazines');
          }
        });
      }
    });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ –¥–≤–∏–∂–µ–Ω–∏–π
    const orgPatterns = [
      /–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è[–∏\s]*[""]([^""]+)[""]?/gi,
      /–¥–≤–∏–∂–µ–Ω–∏–µ[–∏\s]*[""]([^""]+)[""]?/gi,
      /–ø–∞—Ä—Ç–∏—è[–∏\s]*[""]([^""]+)[""]?/gi,
      /–≥—Ä—É–ø–ø–∞[–∏\s]*[""]([^""]+)[""]?/gi
    ];
    
    orgPatterns.forEach(pattern => {
      const matches = cleanDesc.match(pattern);
      if (matches) {
        matches.forEach(match => {
          const org = match.replace(/^(–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è|–¥–≤–∏–∂–µ–Ω–∏–µ|–ø–∞—Ä—Ç–∏—è|–≥—Ä—É–ø–ø–∞)[–∏\s]*/i, '').replace(/[""\s]/g, '').trim();
          if (this.isValidPhrase(org)) {
            this.addPhrase(org, 'organizations');
          }
        });
      }
    });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ç–µ–∫—Å—Ç–∞
    this.extractKeywordsFromText(cleanDesc);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    this.extractSpecificTerms(cleanDesc);
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ (–∞–≤—Ç–æ—Ä—ã, –Ω–∞–∑–≤–∞–Ω–∏—è)
  extractSpecificTerms(text) {
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤
    const authorPatterns = [
      /–∞–≤—Ç–æ—Ä[—ã]?\s*[-‚Äì]\s*([–ê-–Ø][–∞-—è]+\s+[–ê-–Ø]\.[–ê-–Ø]\.)/gi,
      /([–ê-–Ø][–∞-—è]+\s+[–ê-–Ø]\.[–ê-–Ø]\.)/g
    ];
    
    authorPatterns.forEach(pattern => {
      const matches = text.match(pattern);
      if (matches) {
        matches.forEach(match => {
          const author = match.replace(/^–∞–≤—Ç–æ—Ä[—ã]?\s*[-‚Äì]\s*/i, '').trim();
          if (this.isValidPhrase(author) && author.length > 5) {
            this.addPhrase(author, 'general');
          }
        });
      }
    });
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ (—á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è)
    const words = text.split(/\s+/);
    for (let i = 0; i < words.length - 2; i++) {
      const phrase = `${words[i]} ${words[i+1]} ${words[i+2]}`.toLowerCase().trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      if (this.isValidPhrase(phrase) && 
          !/\d{2}\.\d{2}\.\d{4}/.test(phrase) && // –Ω–µ –¥–∞—Ç–∞
          !/‚Ññ\s*\d+/.test(phrase) && // –Ω–µ –Ω–æ–º–µ—Ä
          !/—Ä–µ—à–µ–Ω–∏–µ–º|–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º|–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º/.test(phrase)) {
        this.addPhrase(phrase, 'general');
      }
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—ã 
  extractKeywordsFromText(text) {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ (—Å—É–¥—ã, –¥–∞—Ç—ã, –Ω–æ–º–µ—Ä–∞ –¥–µ–ª)
    let cleanText = text
      .replace(/\([^)]*—Ä–µ—à–µ–Ω–∏–µ–º[^)]*\)/gi, '')
      .replace(/\([^)]*–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º[^)]*\)/gi, '')
      .replace(/\([^)]*–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º[^)]*\)/gi, '')
      .replace(/—Ä–µ—à–µ–Ω–∏–µ–º\s+[^.]+\./gi, '')
      .replace(/–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º\s+[^.]+\./gi, '')
      .replace(/\d{2}\.\d{2}\.\d{4}/g, '') // –¥–∞—Ç—ã
      .replace(/‚Ññ\s*\d+/g, '') // –Ω–æ–º–µ—Ä–∞
      .replace(/[.,;:()]/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
    const words = cleanText.split(/\s+/);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞ (–¥–ª–∏–Ω–æ–π –æ—Ç 4 —Å–∏–º–≤–æ–ª–æ–≤, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
    for (const word of words) {
      const cleanWord = word.toLowerCase().trim();
      if (cleanWord.length >= 4 && 
          !this.stopWords.has(cleanWord) && 
          /^[–∞-—è—ë\-]+$/i.test(cleanWord) &&  // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ —Å–ª–æ–≤–∞—Ö
          !/(—Ä–µ—à–µ–Ω–∏–µ|–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ|–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ|—Å—É–¥|–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ|–ø—Ä–∏–∑–Ω–∞–Ω|–≤–∫–ª—é—á–µ–Ω|–≤–Ω–µ—Å–µ–Ω)/i.test(cleanWord)) {
        this.addPhrase(cleanWord, 'general');
      }
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∏–≥—Ä–∞–º–º—ã (–ø–∞—Ä—ã —Å–ª–æ–≤) –∏ —Ç—Ä–∏–≥—Ä–∞–º–º—ã (—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–≤)
    for (let i = 0; i < words.length - 1; i++) {
      const word1 = words[i].toLowerCase().trim();
      const word2 = words[i + 1].toLowerCase().trim();
      
      if (word1.length >= 3 && word2.length >= 3 && 
          !this.stopWords.has(word1) && !this.stopWords.has(word2) &&
          /^[–∞-—è—ë\-]+$/i.test(word1) && /^[–∞-—è—ë\-]+$/i.test(word2) &&
          !/(—Ä–µ—à–µ–Ω–∏–µ|–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ|–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ|—Å—É–¥)/i.test(`${word1} ${word2}`)) {
        const bigram = `${word1} ${word2}`;
        this.addPhrase(bigram, 'general');
        
        // –¢—Ä–∏–≥—Ä–∞–º–º—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (i < words.length - 2) {
          const word3 = words[i + 2].toLowerCase().trim();
          if (word3.length >= 3 && !this.stopWords.has(word3) && 
              /^[–∞-—è—ë\-]+$/i.test(word3)) {
            const trigram = `${word1} ${word2} ${word3}`;
            if (trigram.length <= 50) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
              this.addPhrase(trigram, 'general');
            }
          }
        }
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ—Ä–∞–∑—ã
  isValidPhrase(phrase) {
    if (!phrase || phrase.length < 3 || phrase.length > 100) return false;
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —á–∏—Å—Ç–æ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (/^\d+$/.test(phrase)) return false;
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    const technicalTerms = ['—Ä–µ—à–µ–Ω–∏–µ–º', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º', '–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º', '–ø—Ä–∏–≥–æ–≤–æ—Ä–æ–º', '—Å—É–¥–æ–º'];
    if (technicalTerms.some(term => phrase.toLowerCase().includes(term))) return false;
    
    // –î–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É
    if (!/[–∞-—è—ëa-z]/i.test(phrase)) return false;
    
    return true;
  }

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ—Ä–∞–∑—ã
  categorizePhrase(phrase, context) {
    const lowerPhrase = phrase.toLowerCase();
    const lowerContext = context.toLowerCase();
    
    if (lowerContext.includes('–∫–Ω–∏–≥–∞') || lowerContext.includes('–∞–≤—Ç–æ—Ä') || lowerContext.includes('–∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ')) {
      return 'books';
    }
    
    if (lowerContext.includes('—Å–∞–π—Ç') || lowerContext.includes('http') || lowerContext.includes('www') || phrase.includes('.')) {
      return 'websites';
    }
    
    if (lowerContext.includes('–∂—É—Ä–Ω–∞–ª') || lowerContext.includes('–≥–∞–∑–µ—Ç–∞') || lowerContext.includes('–∏–∑–¥–∞–Ω–∏–µ')) {
      return 'magazines';
    }
    
    if (lowerContext.includes('–≤–∏–¥–µ–æ') || lowerContext.includes('—Ñ–∏–ª—å–º') || lowerContext.includes('dvd')) {
      return 'videos';
    }
    
    if (lowerContext.includes('–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è') || lowerContext.includes('–¥–≤–∏–∂–µ–Ω–∏–µ') || lowerContext.includes('–ø–∞—Ä—Ç–∏—è')) {
      return 'organizations';
    }
    
    return 'general';
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  addPhrase(phrase, category) {
    const cleanPhrase = phrase.trim().toLowerCase();
    if (this.isValidPhrase(cleanPhrase)) {
      this.blockedPhrases.add(cleanPhrase);
      if (this.categories[category]) {
        this.categories[category].add(cleanPhrase);
      }
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
  generateBlockedPhrasesJSON() {
    const result = {
      version: "1.0.0",
      updated: new Date().toISOString(),
      total_phrases: this.blockedPhrases.size,
      categories: {
        books: Array.from(this.categories.books),
        websites: Array.from(this.categories.websites),
        magazines: Array.from(this.categories.magazines),
        videos: Array.from(this.categories.videos),
        organizations: Array.from(this.categories.organizations),
        general: Array.from(this.categories.general)
      },
      all_phrases: Array.from(this.blockedPhrases).sort(),
      settings: {
        case_sensitive: false,
        partial_match: true,
        min_length: 3,
        enabled: true
      },
      search_engines: [
        "google.com",
        "google.ru", 
        "yandex.ru",
        "yandex.com",
        "bing.com",
        "mail.ru",
        "rambler.ru",
        "yahoo.com",
        "duckduckgo.com"
      ]
    };
    
    return result;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
  saveToFile(outputPath) {
    const data = this.generateBlockedPhrasesJSON();
    
    try {
      fs.writeFileSync(outputPath, JSON.stringify(data, null, 2), 'utf-8');
      console.log(`\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputPath}`);
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`   –í—Å–µ–≥–æ —Ñ—Ä–∞–∑: ${data.total_phrases}`);
      console.log(`   –ö–Ω–∏–≥–∏: ${data.categories.books.length}`);
      console.log(`   –°–∞–π—Ç—ã: ${data.categories.websites.length}`);
      console.log(`   –ñ—É—Ä–Ω–∞–ª—ã: ${data.categories.magazines.length}`);
      console.log(`   –í–∏–¥–µ–æ: ${data.categories.videos.length}`);
      console.log(`   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${data.categories.organizations.length}`);
      console.log(`   –û–±—â–∏–µ: ${data.categories.general.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑
      console.log(`\nüìù –ü—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑:`);
      if (data.categories.books.length > 0) {
        console.log(`   –ö–Ω–∏–≥–∏: ${data.categories.books.slice(0, 3).join(', ')}...`);
      }
      if (data.categories.websites.length > 0) {
        console.log(`   –°–∞–π—Ç—ã: ${data.categories.websites.slice(0, 3).join(', ')}...`);
      }
      if (data.categories.organizations.length > 0) {
        console.log(`   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${data.categories.organizations.slice(0, 3).join(', ')}...`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
if (require.main === module) {
  const parser = new CSVPhraseParser();
  const csvPath = path.join(__dirname, 'exportfsm.csv');
  const outputPath = path.join(__dirname, 'blocked-phrases.json');
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Ñ–∞–π–ª–∞...');
  console.log(`üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${csvPath}`);
  console.log(`üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${outputPath}`);
  
  parser.parseCSVFile(csvPath);
  parser.saveToFile(outputPath);
  
  console.log('\n‚ú® –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

module.exports = CSVPhraseParser; 