// SafeLink Background Script
class SafeLinkCore {
  constructor() {
    this.blockedSites = new Set();
    this.allowedSites = new Set();
    this.blockedPhrases = new Set();
    this.phraseCategories = {};
    this.ignoredSearchUrls = new Set(); // URLs –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    this.searchEngines = new Set([
      'google.com', 'google.ru', 'yandex.ru', 'yandex.com', 
      'bing.com', 'mail.ru', 'rambler.ru', 'yahoo.com', 'duckduckgo.com'
    ]);
    this.settings = {
      blockMode: 'warn', // 'block', 'warn', 'disabled'
      phraseBlockMode: 'warn', // 'block', 'warn', 'disabled'
      phraseSensitivity: 'medium', // 'strict', 'medium', 'loose'
      markLinks: true // –≤—ã–¥–µ–ª—è—Ç—å –æ–ø–∞—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    };
    this.init();
  }

  async init() {
    await this.loadSettings();
    await this.loadBlockedSites();
    this.setupEventListeners();
  }

  async loadSettings() {
    const result = await chrome.storage.local.get(['safelink_settings']);
    if (result.safelink_settings) {
      console.log('üì• Loading settings from storage:', result.safelink_settings);
      this.settings = { ...this.settings, ...result.safelink_settings };
      console.log('‚öôÔ∏è Settings loaded and merged:', this.settings);
    } else {
      console.log('‚öôÔ∏è No saved settings found, using defaults:', this.settings);
    }
  }

  async saveSettings() {
    await chrome.storage.local.set({ safelink_settings: this.settings });
    console.log('üíæ Settings saved to storage:', this.settings);
  }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  normalizeUrl(url) {
    try {
      const urlObj = new URL(url);
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      urlObj.searchParams.forEach((value, key) => {
        try {
          const decodedValue = decodeURIComponent(value);
          urlObj.searchParams.set(key, decodedValue);
        } catch (e) {
          // –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        }
      });
      const normalized = urlObj.toString();
      console.log('üîÑ Background: URL normalized from:', url);
      console.log('üîÑ Background: URL normalized to:', normalized);
      return normalized;
    } catch (error) {
      console.log('‚ö†Ô∏è Background: URL normalization failed, using original:', url);
      return url;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å URL –≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ (persistent)
  async addToIgnoredUrls(url) {
    try {
      console.log('üèÉ‚Äç‚ôÇÔ∏è Background: Starting addToIgnoredUrls for:', url);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL
      const normalizedUrl = this.normalizeUrl(url);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ memory (–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
      this.ignoredSearchUrls.add(url);
      this.ignoredSearchUrls.add(normalizedUrl);
      console.log('üß† Background: Added to memory cache (both URLs)');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ storage —Å timestamp (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
      const result = await chrome.storage.local.get(['safelink_ignored_urls']);
      const ignoredUrls = result.safelink_ignored_urls || {};
      console.log('üìÇ Background: Current ignored URLs count:', Object.keys(ignoredUrls).length);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π URL —Å timestamp
      ignoredUrls[normalizedUrl] = Date.now();
      
      await chrome.storage.local.set({ safelink_ignored_urls: ignoredUrls });
      console.log('üíæ Background: Saved normalized URL to persistent storage successfully');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
      const verification = await chrome.storage.local.get(['safelink_ignored_urls']);
      const saved = verification.safelink_ignored_urls || {};
      if (saved[normalizedUrl]) {
        console.log('‚úÖ Background: Verification passed - normalized URL found in storage');
      } else {
        console.log('‚ùå Background: Verification failed - normalized URL not found in storage!');
      }
      
      // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–µ–Ω–æ)
      setTimeout(() => {
        this.removeFromIgnoredUrls(normalizedUrl).catch(error => {
          console.error('‚ùå Background: Auto-cleanup failed:', error);
        });
      }, 60000);
      
    } catch (error) {
      console.error('‚ùå Background: Failed to add ignored URL:', error);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞–≤–µ—Ä—Ö
    }
  }

  // –£–¥–∞–ª–∏—Ç—å URL –∏–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö
  async removeFromIgnoredUrls(url) {
    try {
      // –£–¥–∞–ª—è–µ–º –∏–∑ memory
      this.ignoredSearchUrls.delete(url);
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ storage
      const result = await chrome.storage.local.get(['safelink_ignored_urls']);
      const ignoredUrls = result.safelink_ignored_urls || {};
      
      if (ignoredUrls[url]) {
        delete ignoredUrls[url];
        await chrome.storage.local.set({ safelink_ignored_urls: ignoredUrls });
        console.log('üîÑ Background: Removed from ignored list:', url);
      }
    } catch (error) {
      console.error('‚ùå Background: Failed to remove ignored URL:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–∏ URL
  async isUrlIgnored(url) {
    try {
      console.log('üîç Background: Checking if URL is ignored:', url);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const normalizedUrl = this.normalizeUrl(url);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º memory –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º (–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π, –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
      if (this.ignoredSearchUrls.has(url) || this.ignoredSearchUrls.has(normalizedUrl)) {
        console.log('‚úÖ Background: Found in memory cache');
        return true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º persistent storage
      const result = await chrome.storage.local.get(['safelink_ignored_urls']);
      const ignoredUrls = result.safelink_ignored_urls || {};
      console.log('üìÇ Background: Checking storage, current ignored count:', Object.keys(ignoredUrls).length);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ URL –≤ storage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      Object.keys(ignoredUrls).forEach(ignoredUrl => {
        console.log('üìã Background: Storage contains:', ignoredUrl);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π URL –≤ storage
      if (ignoredUrls[normalizedUrl]) {
        const timestamp = ignoredUrls[normalizedUrl];
        const now = Date.now();
        const age = now - timestamp;
        
        console.log(`‚è∞ Background: Found normalized URL in storage, age: ${age}ms (limit: 60000ms)`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ (60 —Å–µ–∫—É–Ω–¥)
        if (age < 60000) {
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å memory
          this.ignoredSearchUrls.add(url);
          this.ignoredSearchUrls.add(normalizedUrl);
          console.log('‚úÖ Background: URL is ignored (found normalized URL in storage)');
          return true;
        } else {
          // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π
          console.log('üóëÔ∏è Background: Normalized URL expired, removing from ignored list');
          await this.removeFromIgnoredUrls(normalizedUrl);
          return false;
        }
      }
      
      console.log('‚ùå Background: Neither original nor normalized URL found in ignored list');
      return false;
    } catch (error) {
      console.error('‚ùå Background: Failed to check ignored URL:', error);
      return false;
    }
  }

  async loadBlockedSites() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤
      const response = await fetch(chrome.runtime.getURL('blocked-sites.json'));
      const localSites = await response.json();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
      const result = await chrome.storage.local.get(['custom_blocked_sites', 'custom_allowed_sites']);
      
      this.blockedSites = new Set([
        ...localSites.blocked,
        ...(result.custom_blocked_sites || [])
      ]);
      
      this.allowedSites = new Set(result.custom_allowed_sites || []);
      
      console.log(`SafeLink: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.blockedSites.size} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
      await this.loadBlockedPhrases();
      
    } catch (error) {
      console.error('SafeLink: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤:', error);
    }
  }

  async loadBlockedPhrases() {
    try {
      const response = await fetch(chrome.runtime.getURL('blocked-phrases.json'));
      const phrasesData = await response.json();
      
      this.blockedPhrases = new Set(phrasesData.all_phrases || []);
      this.phraseCategories = phrasesData.categories || {};
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
      if (phrasesData.search_engines) {
        this.searchEngines = new Set(phrasesData.search_engines);
      }
      
      console.log(`SafeLink: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.blockedPhrases.size} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑`);
      console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –∫–Ω–∏–≥–∏(${this.phraseCategories.books?.length || 0}), —Å–∞–π—Ç—ã(${this.phraseCategories.websites?.length || 0}), –æ–±—â–∏–µ(${this.phraseCategories.general?.length || 0})`);
      
    } catch (error) {
      console.error('SafeLink: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∞–∑:', error);
    }
  }

  setupEventListeners() {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    chrome.webNavigation.onBeforeNavigate.addListener(async (details) => {
      if (details.frameId === 0) { // –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        try {
          await this.checkUrl(details.url, details.tabId);
        } catch (error) {
          console.error('‚ùå Background: checkUrl failed in webNavigation:', error);
        }
      }
    });

    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∞
  }

  async checkUrl(url, tabId) {
    console.log('üõ°Ô∏è checkUrl called with settings:', {
      blockMode: this.settings.blockMode,
      phraseBlockMode: this.settings.phraseBlockMode,
      url: url
    });
    console.log('üõ°Ô∏è Full settings object:', this.settings);
    
    if (this.settings.blockMode === 'disabled' && this.settings.phraseBlockMode === 'disabled') {
      console.log('üî¥ ALL PROTECTION DISABLED - skipping all checks');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ URL –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    const isIgnored = await this.isUrlIgnored(url);
    if (isIgnored) {
      console.log('‚úÖ Background: URL is in ignored list, skipping checks:', url);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
    const urlCheck = this.isUrlBlocked(url);
    
    if (urlCheck.blocked && !urlCheck.allowed) {
      if (this.settings.blockMode === 'block') {
        chrome.tabs.update(tabId, {
          url: chrome.runtime.getURL('warning-extension.html') + '?url=' + encodeURIComponent(url)
        });
      } else if (this.settings.blockMode === 'warn') {
        chrome.tabs.update(tabId, {
          url: chrome.runtime.getURL('warning-extension.html') + '?url=' + encodeURIComponent(url)
        });
      }
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    console.log('üìù Checking phrases with phraseBlockMode:', this.settings.phraseBlockMode);
    if (this.settings.phraseBlockMode !== 'disabled') {
      const phraseCheck = this.checkSearchQuery(url);
      console.log('üìù Phrase check result:', phraseCheck);
      
      if (phraseCheck.blocked) {
        if (this.settings.phraseBlockMode === 'block') {
          chrome.tabs.update(tabId, {
            url: chrome.runtime.getURL('warning-phrase.html') + '?phrase=' + encodeURIComponent(phraseCheck.phrase) + '&search=' + encodeURIComponent(url)
          });
        } else if (this.settings.phraseBlockMode === 'warn') {
          chrome.tabs.update(tabId, {
            url: chrome.runtime.getURL('warning-phrase.html') + '?phrase=' + encodeURIComponent(phraseCheck.phrase) + '&search=' + encodeURIComponent(url)
          });
        }
      }
    }
  }

  isUrlBlocked(url) {
    try {
      const urlObj = new URL(url);
      const domain = urlObj.hostname.toLowerCase();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º allowed sites (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      if (this.allowedSites.has(domain)) {
        return { blocked: false, allowed: true, reason: 'whitelisted' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
      if (this.blockedSites.has(domain)) {
        return { blocked: true, allowed: false, reason: 'exact_match', domain };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–æ–º–µ–Ω—ã
      const domainParts = domain.split('.');
      for (let i = 1; i < domainParts.length; i++) {
        const parentDomain = domainParts.slice(i).join('.');
        if (this.blockedSites.has(parentDomain)) {
          return { blocked: true, allowed: false, reason: 'subdomain', domain: parentDomain };
        }
      }

      return { blocked: false, allowed: false, reason: 'not_in_list' };
    } catch (error) {
      console.error('SafeLink: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL:', error);
      return { blocked: false, allowed: false, reason: 'error' };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ—Ä–∞–∑–∞–º
  async getPhraseStats() {
    try {
      const result = await chrome.storage.local.get(['safelink_phrase_stats']);
      return result.safelink_phrase_stats || { blocked: 0, ignored: 0 };
    } catch (error) {
      console.error('SafeLink: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ—Ä–∞–∑:', error);
      return { blocked: 0, ignored: 0 };
    }
  }

  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–∞–π—Ç–∞
  allowSiteTemporarily(url) {
    try {
      const urlObj = new URL(url);
      const domain = urlObj.hostname.toLowerCase();
      this.allowedSites.add(domain);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
      chrome.storage.local.get(['custom_allowed_sites'], (result) => {
        const allowedSites = result.custom_allowed_sites || [];
        if (!allowedSites.includes(domain)) {
          allowedSites.push(domain);
          chrome.storage.local.set({ custom_allowed_sites: allowedSites });
        }
      });
      
      console.log(`SafeLink: –°–∞–π—Ç ${domain} –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω`);
    } catch (error) {
      console.error('SafeLink: –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–∞–π—Ç–∞:', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async updateSettings(newSettings) {
    this.settings = { ...this.settings, ...newSettings };
    await chrome.storage.local.set({ safelink_settings: this.settings });
    console.log('SafeLink: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.settings);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ content-—Å–∫—Ä–∏–ø—Ç—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try {
      const tabs = await chrome.tabs.query({});
      for (const tab of tabs) {
        try {
          await chrome.tabs.sendMessage(tab.id, {
            action: 'settingsUpdated',
            settings: this.settings
          });
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫, –≥–¥–µ –Ω–µ—Ç content-—Å–∫—Ä–∏–ø—Ç–∞
        }
      }
      console.log('üì¢ Background: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º content-—Å–∫—Ä–∏–ø—Ç–∞–º');
    } catch (error) {
      console.error('‚ùå Background: –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è content-—Å–∫—Ä–∏–ø—Ç–æ–≤:', error);
    }
  }

  // PRO —Ñ—É–Ω–∫—Ü–∏–∏
  scheduleSync() {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    const now = Date.now();
    const lastSync = this.settings.lastSync || 0;
    const syncInterval = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

    if (now - lastSync > syncInterval) {
      this.syncWithRegistry();
    }

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    setTimeout(() => {
      this.scheduleSync();
    }, syncInterval);
  }

  async syncWithRegistry() {
    if (!this.settings.proVersion) return;

    try {
      console.log('SafeLink PRO: –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Ä–µ–µ—Å—Ç—Ä–æ–º...');
      
      // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —Ä–µ–µ—Å—Ç—Ä–∞
      // const response = await fetch('https://api.safelink.com/registry/blocked-sites');
      // const data = await response.json();
      
      // –ü–æ–∫–∞ —á—Ç–æ —ç–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const simulatedResponse = {
        blocked_sites: [
          'malicious-site.com',
          'phishing-example.net',
          'fake-bank.org'
        ],
        updated_at: new Date().toISOString()
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      const result = await chrome.storage.local.get(['custom_blocked_sites']);
      const customBlocked = result.custom_blocked_sites || [];
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–ø–∏—Å–∫–æ–º
      const newBlockedSites = [...new Set([...customBlocked, ...simulatedResponse.blocked_sites])];
      
      await chrome.storage.local.set({ 
        registry_blocked_sites: simulatedResponse.blocked_sites,
        registry_updated: simulatedResponse.updated_at
      });

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏
      await this.loadBlockedSites();
      
      this.settings.lastSync = Date.now();
      await this.saveSettings();
      
      console.log('SafeLink PRO: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('SafeLink PRO: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
  checkSearchQuery(url) {
    try {
      const urlObj = new URL(url);
      const domain = urlObj.hostname.toLowerCase();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
      const isSearchEngine = this.searchEngines.has(domain) || 
                            Array.from(this.searchEngines).some(engine => domain.includes(engine));
      
      if (!isSearchEngine) {
        return { blocked: false, reason: 'not_search_engine' };
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ URL
      const searchQuery = this.extractSearchQuery(url, domain);
      
      if (!searchQuery) {
        return { blocked: false, reason: 'no_query' };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
      const phraseCheck = this.isPhraseBlocked(searchQuery);
      
      if (phraseCheck.blocked) {
        return {
          blocked: true,
          phrase: phraseCheck.phrase,
          category: phraseCheck.category,
          query: searchQuery,
          searchEngine: domain,
          reason: 'blocked_phrase'
        };
      }
      
      return { blocked: false, reason: 'phrase_allowed' };
      
    } catch (error) {
      console.error('SafeLink: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return { blocked: false, reason: 'error' };
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ URL —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
  extractSearchQuery(url, domain) {
    const urlObj = new URL(url);
    const params = urlObj.searchParams;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
    const queryParams = {
      'google.com': 'q',
      'google.ru': 'q',
      'yandex.ru': 'text',
      'yandex.com': 'text',
      'bing.com': 'q',
      'mail.ru': 'q',
      'rambler.ru': 'query',
      'yahoo.com': 'p',
      'duckduckgo.com': 'q'
    };
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    let queryParam = 'q'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for (const [engine, param] of Object.entries(queryParams)) {
      if (domain.includes(engine)) {
        queryParam = param;
        break;
      }
    }
    
    const query = params.get(queryParam);
    return query ? decodeURIComponent(query).toLowerCase().trim() : null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–∑—ã –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
  isPhraseBlocked(query) {
    if (!query || query.length < 3) {
      return { blocked: false, reason: 'too_short' };
    }
    
    const normalizedQuery = query.toLowerCase().trim();
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (this.blockedPhrases.has(normalizedQuery)) {
      return {
        blocked: true,
        phrase: normalizedQuery,
        category: this.findPhraseCategory(normalizedQuery),
        matchType: 'exact'
      };
    }
    
    // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if (this.settings.phraseSensitivity !== 'strict') {
      for (const blockedPhrase of this.blockedPhrases) {
        if (blockedPhrase.length >= 4) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã –≤ –∑–∞–ø—Ä–æ—Å
          if (normalizedQuery.includes(blockedPhrase)) {
            return {
              blocked: true,
              phrase: blockedPhrase,
              category: this.findPhraseCategory(blockedPhrase),
              matchType: 'partial'
            };
          }
          
          // –ï—Å–ª–∏ —Ä–µ–∂–∏–º "loose", –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞—Ç–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
          if (this.settings.phraseSensitivity === 'loose' && blockedPhrase.includes(normalizedQuery)) {
            return {
              blocked: true,
              phrase: blockedPhrase,
              category: this.findPhraseCategory(blockedPhrase),
              matchType: 'contained'
            };
          }
        }
      }
    }
    
    return { blocked: false, reason: 'not_found' };
  }

  // –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—Ä–∞–∑—ã
  findPhraseCategory(phrase) {
    for (const [category, phrases] of Object.entries(this.phraseCategories)) {
      if (phrases && phrases.includes(phrase)) {
        return category;
      }
    }
    return 'general';
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup –∏ content scripts
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('üì® Background –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', request);

  (async () => {
    try {
      switch (request.action) {
        case 'getSettings':
          sendResponse(safeLinkCore.settings);
          break;

        case 'updateSettings':
          console.log('üì® Background: updateSettings received:', request);
          if (request.settings) {
            try {
              await safeLinkCore.updateSettings(request.settings);
              sendResponse({ success: true });
            } catch (error) {
              console.error('‚ùå Background: updateSettings failed:', error);
              sendResponse({ success: false, error: error.message });
            }
          } else {
            console.log('‚ùå No settings provided in request');
            sendResponse({ success: false, error: 'No settings provided' });
          }
          break;

      case 'allowSite':
        if (request.url) {
          const domain = new URL(request.url).hostname;
          safeLinkCore.allowedSites.add(domain);
          await safeLinkCore.saveSettings(); // Changed from saveAllowedSites to saveSettings
          console.log('‚úÖ –°–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:', domain);
          sendResponse({ success: true });
        } else {
          sendResponse({ success: false, error: 'No URL provided' });
        }
        break;

      case 'openUrl':
        if (request.url) {
          // –î–æ–±–∞–≤–ª—è–µ–º URL –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö
          const normalizedUrl = safeLinkCore.normalizeUrl(request.url);
          safeLinkCore.ignoredSearchUrls.add(normalizedUrl);
          await safeLinkCore.saveSettings(); // Changed from saveIgnoredUrls to saveSettings
          
          console.log('üîó Background: Opening URL:', request.url);
          
          // –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É, —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
          sendResponse({ success: true, tabCreated: false });
        } else {
          sendResponse({ success: false, error: 'No URL provided' });
        }
        break;

      case 'checkUrl':
        if (request.url) {
          console.log('üîç Content script checking URL:', request.url);
          const result = safeLinkCore.isUrlBlocked(request.url);
          console.log('üîç URL check result:', result);
          sendResponse(result);
        } else {
          sendResponse({ blocked: false, error: 'No URL provided' });
        }
        break;

      case 'checkPhrase':
        if (request.phrase) {
          console.log('üìù Content script checking phrase:', request.phrase);
          const result = safeLinkCore.isPhraseBlocked(request.phrase);
          console.log('üìù Phrase check result:', result);
          sendResponse(result);
        } else {
          sendResponse({ blocked: false, error: 'No phrase provided' });
        }
        break;

      default:
        console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', request.action);
        sendResponse({ success: false, error: 'Unknown action' });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    sendResponse({ success: false, error: error.message });
  }
  })(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º IIFE

  return true; // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SafeLink
const safeLinkCore = new SafeLinkCore(); 