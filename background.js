// SafeLink Background Script
class SafeLinkCore {
  constructor() {
    this.blockedSites = new Set();
    this.allowedSites = new Set();
    this.blockedPhrases = new Set();
    this.phrasesExceptions = new Set(); // –§—Ä–∞–∑—ã-–∏—Å–∫–ª—é—á–µ–Ω–∏—è
    this.phraseCategories = {};
    this.ignoredSearchUrls = new Set(); // URLs –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    this.searchEngines = new Set([
      'google.com', 'google.ru', 'yandex.ru', 'yandex.com', 
      'bing.com', 'mail.ru', 'rambler.ru', 'yahoo.com', 'duckduckgo.com'
    ]);
    this.settings = {
      blockMode: 'warn', // 'warn', 'disabled'
      phraseBlockMode: 'warn', // 'warn', 'disabled'
      phraseSensitivity: 'medium', // 'strict', 'medium', 'loose'
      markLinks: true, // –≤—ã–¥–µ–ª—è—Ç—å –æ–ø–∞—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
      autoUpdatePhrases: false, // –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑ —Å –ú–∏–Ω—é—Å—Ç–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
      lastPhraseUpdate: 0 // timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    };
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ú–∏–Ω—é—Å—Ç–∞ (5 —Å–µ–∫—É–Ω–¥)
    this.minJustRequestDelay = 5000;
    this.lastMinJustRequest = 0;
    this.init();
  }

  async init() {
    await this.loadSettings();
    await this.initializePhrases(); // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–∞–∑
    await this.loadPhrasesExceptions(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    await this.loadBlockedSites();
    this.setupEventListeners();
  }

  async loadSettings() {
    const result = await chrome.storage.local.get(['safelink_settings']);
    if (result.safelink_settings) {
      console.log('üì• Loading settings from storage:', result.safelink_settings);
      this.settings = { ...this.settings, ...result.safelink_settings };
      console.log('‚öôÔ∏è Settings loaded and merged:', this.settings);
    } else {
      console.log('‚öôÔ∏è No saved settings found, using defaults:', this.settings);
    }
  }

  async saveSettings() {
    await chrome.storage.local.set({ safelink_settings: this.settings });
    console.log('üíæ Settings saved to storage:', this.settings);
  }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  normalizeUrl(url) {
    try {
      const urlObj = new URL(url);
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      urlObj.searchParams.forEach((value, key) => {
        try {
          const decodedValue = decodeURIComponent(value);
          urlObj.searchParams.set(key, decodedValue);
        } catch (e) {
          // –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        }
      });
      const normalized = urlObj.toString();
      console.log('üîÑ Background: URL normalized from:', url);
      console.log('üîÑ Background: URL normalized to:', normalized);
      return normalized;
    } catch (error) {
      console.log('‚ö†Ô∏è Background: URL normalization failed, using original:', url);
      return url;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å URL –≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ (persistent)
  async addToIgnoredUrls(url) {
    try {
      console.log('üèÉ‚Äç‚ôÇÔ∏è Background: Starting addToIgnoredUrls for:', url);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL
      const normalizedUrl = this.normalizeUrl(url);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ memory (–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
      this.ignoredSearchUrls.add(url);
      this.ignoredSearchUrls.add(normalizedUrl);
      console.log('üß† Background: Added to memory cache (both URLs)');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ storage —Å timestamp (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
      const result = await chrome.storage.local.get(['safelink_ignored_urls']);
      const ignoredUrls = result.safelink_ignored_urls || {};
      console.log('üìÇ Background: Current ignored URLs count:', Object.keys(ignoredUrls).length);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π URL —Å timestamp
      ignoredUrls[normalizedUrl] = Date.now();
      
      await chrome.storage.local.set({ safelink_ignored_urls: ignoredUrls });
      console.log('üíæ Background: Saved normalized URL to persistent storage successfully');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
      const verification = await chrome.storage.local.get(['safelink_ignored_urls']);
      const saved = verification.safelink_ignored_urls || {};
      if (saved[normalizedUrl]) {
        console.log('‚úÖ Background: Verification passed - normalized URL found in storage');
      } else {
        console.log('‚ùå Background: Verification failed - normalized URL not found in storage!');
      }
      
      // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–µ–Ω–æ)
      setTimeout(() => {
        this.removeFromIgnoredUrls(normalizedUrl).catch(error => {
          console.error('‚ùå Background: Auto-cleanup failed:', error);
        });
      }, 60000);
      
    } catch (error) {
      console.error('‚ùå Background: Failed to add ignored URL:', error);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞–≤–µ—Ä—Ö
    }
  }

  // –£–¥–∞–ª–∏—Ç—å URL –∏–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö
  async removeFromIgnoredUrls(url) {
    try {
      // –£–¥–∞–ª—è–µ–º –∏–∑ memory
      this.ignoredSearchUrls.delete(url);
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ storage
      const result = await chrome.storage.local.get(['safelink_ignored_urls']);
      const ignoredUrls = result.safelink_ignored_urls || {};
      
      if (ignoredUrls[url]) {
        delete ignoredUrls[url];
        await chrome.storage.local.set({ safelink_ignored_urls: ignoredUrls });
        console.log('üîÑ Background: Removed from ignored list:', url);
      }
    } catch (error) {
      console.error('‚ùå Background: Failed to remove ignored URL:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–∏ URL
  async isUrlIgnored(url) {
    try {
      console.log('üîç Background: Checking if URL is ignored:', url);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const normalizedUrl = this.normalizeUrl(url);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º memory –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º (–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π, –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
      if (this.ignoredSearchUrls.has(url) || this.ignoredSearchUrls.has(normalizedUrl)) {
        console.log('‚úÖ Background: Found in memory cache');
        return true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º persistent storage
      const result = await chrome.storage.local.get(['safelink_ignored_urls']);
      const ignoredUrls = result.safelink_ignored_urls || {};
      console.log('üìÇ Background: Checking storage, current ignored count:', Object.keys(ignoredUrls).length);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ URL –≤ storage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      Object.keys(ignoredUrls).forEach(ignoredUrl => {
        console.log('üìã Background: Storage contains:', ignoredUrl);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π URL –≤ storage
      if (ignoredUrls[normalizedUrl]) {
        const timestamp = ignoredUrls[normalizedUrl];
        const now = Date.now();
        const age = now - timestamp;
        
        console.log(`‚è∞ Background: Found normalized URL in storage, age: ${age}ms (limit: 60000ms)`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ (60 —Å–µ–∫—É–Ω–¥)
        if (age < 60000) {
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å memory
          this.ignoredSearchUrls.add(url);
          this.ignoredSearchUrls.add(normalizedUrl);
          console.log('‚úÖ Background: URL is ignored (found normalized URL in storage)');
          return true;
        } else {
          // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π
          console.log('üóëÔ∏è Background: Normalized URL expired, removing from ignored list');
          await this.removeFromIgnoredUrls(normalizedUrl);
          return false;
        }
      }
      
      console.log('‚ùå Background: Neither original nor normalized URL found in ignored list');
      return false;
    } catch (error) {
      console.error('‚ùå Background: Failed to check ignored URL:', error);
      return false;
    }
  }

  async loadBlockedSites() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤
      const response = await fetch(chrome.runtime.getURL('blocked-sites.json'));
      const localSites = await response.json();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
      const result = await chrome.storage.local.get(['custom_blocked_sites', 'custom_allowed_sites']);
      
      this.blockedSites = new Set([
        ...localSites.blocked,
        ...(result.custom_blocked_sites || [])
      ]);
      
      this.allowedSites = new Set(result.custom_allowed_sites || []);
      
      console.log(`SafeLink: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.blockedSites.size} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤`);
      
    } catch (error) {
      console.error('SafeLink: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤:', error);
    }
  }



  setupEventListeners() {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    chrome.webNavigation.onBeforeNavigate.addListener(async (details) => {
      if (details.frameId === 0) { // –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        try {
          await this.checkUrl(details.url, details.tabId);
        } catch (error) {
          console.error('‚ùå Background: checkUrl failed in webNavigation:', error);
        }
      }
    });

    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∞
  }

  async checkUrl(url, tabId) {
    console.log('üõ°Ô∏è checkUrl called with settings:', {
      blockMode: this.settings.blockMode,
      phraseBlockMode: this.settings.phraseBlockMode,
      url: url
    });
    console.log('üõ°Ô∏è Full settings object:', this.settings);
    
    if (this.settings.blockMode === 'disabled' && this.settings.phraseBlockMode === 'disabled') {
      console.log('üî¥ ALL PROTECTION DISABLED - skipping all checks');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ URL –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    const isIgnored = await this.isUrlIgnored(url);
    if (isIgnored) {
      console.log('‚úÖ Background: URL is in ignored list, skipping checks:', url);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
    const urlCheck = this.isUrlBlocked(url);
    
    if (urlCheck.blocked && !urlCheck.allowed) {
      if (this.settings.blockMode !== 'disabled') {
        chrome.tabs.update(tabId, {
          url: chrome.runtime.getURL('warning-extension.html') + '?url=' + encodeURIComponent(url)
        });
      }
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    console.log('üìù Checking phrases with phraseBlockMode:', this.settings.phraseBlockMode);
    if (this.settings.phraseBlockMode !== 'disabled') {
      const phraseCheck = this.checkSearchQuery(url);
      console.log('üìù Phrase check result:', phraseCheck);
      
      if (phraseCheck.blocked) {
        chrome.tabs.update(tabId, {
          url: chrome.runtime.getURL('warning-phrase.html') + '?phrase=' + encodeURIComponent(phraseCheck.phrase) + '&search=' + encodeURIComponent(url)
        });
        return;
      }
    }
  }

  isUrlBlocked(url) {
    try {
      const urlObj = new URL(url);
      const domain = urlObj.hostname.toLowerCase();
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      let fullUrlPath = domain;
      if (urlObj.pathname && urlObj.pathname !== '/') {
        fullUrlPath += urlObj.pathname;
      }
      if (urlObj.search) {
        fullUrlPath += urlObj.search;
      }
      fullUrlPath = fullUrlPath.toLowerCase();
      
      // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º allowed sites - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω—ã–π URL, –ø–æ—Ç–æ–º –¥–æ–º–µ–Ω
      if (this.allowedSites.has(fullUrlPath)) {
        return { blocked: false, allowed: true, reason: 'whitelisted_url' };
      }
      if (this.allowedSites.has(domain)) {
        return { blocked: false, allowed: true, reason: 'whitelisted_domain' };
      }

      // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º blocked sites - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω—ã–π URL, –ø–æ—Ç–æ–º –¥–æ–º–µ–Ω  
      if (this.blockedSites.has(fullUrlPath)) {
        return { blocked: true, allowed: false, reason: 'exact_url_match', url: fullUrlPath };
      }
      
      if (this.blockedSites.has(domain)) {
        return { blocked: true, allowed: false, reason: 'exact_domain_match', domain };
      }

      // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ URL-–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
      for (const blockedItem of this.blockedSites) {
        if (blockedItem.includes('/')) { // –≠—Ç–æ –ø–æ–ª–Ω—ã–π URL, –Ω–µ –¥–æ–º–µ–Ω
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–∞—à URL —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ URL
          if (fullUrlPath.startsWith(blockedItem)) {
            return { blocked: true, allowed: false, reason: 'url_prefix_match', url: blockedItem };
          }
        }
      }

      // –ü–†–ò–û–†–ò–¢–ï–¢ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–æ–º–µ–Ω—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
      const domainParts = domain.split('.');
      for (let i = 1; i < domainParts.length; i++) {
        const parentDomain = domainParts.slice(i).join('.');
        if (this.blockedSites.has(parentDomain)) {
          return { blocked: true, allowed: false, reason: 'subdomain', domain: parentDomain };
        }
      }

      return { blocked: false, allowed: false, reason: 'not_in_list' };
    } catch (error) {
      console.error('SafeLink: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL:', error);
      return { blocked: false, allowed: false, reason: 'error' };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ—Ä–∞–∑–∞–º
  async getPhraseStats() {
    try {
      const result = await chrome.storage.local.get(['safelink_phrase_stats']);
      return result.safelink_phrase_stats || { blocked: 0, ignored: 0 };
    } catch (error) {
      console.error('SafeLink: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ—Ä–∞–∑:', error);
      return { blocked: 0, ignored: 0 };
    }
  }

  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–∞–π—Ç–∞
  allowSiteTemporarily(url) {
    try {
      const urlObj = new URL(url);
      const domain = urlObj.hostname.toLowerCase();
      this.allowedSites.add(domain);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
      chrome.storage.local.get(['custom_allowed_sites'], (result) => {
        const allowedSites = result.custom_allowed_sites || [];
        if (!allowedSites.includes(domain)) {
          allowedSites.push(domain);
          chrome.storage.local.set({ custom_allowed_sites: allowedSites });
        }
      });
      
      console.log(`SafeLink: –°–∞–π—Ç ${domain} –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω`);
    } catch (error) {
      console.error('SafeLink: –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–∞–π—Ç–∞:', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async updateSettings(newSettings) {
    this.settings = { ...this.settings, ...newSettings };
    await chrome.storage.local.set({ safelink_settings: this.settings });
    console.log('SafeLink: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.settings);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ content-—Å–∫—Ä–∏–ø—Ç—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try {
      const tabs = await chrome.tabs.query({});
      for (const tab of tabs) {
        try {
          await chrome.tabs.sendMessage(tab.id, {
            action: 'settingsUpdated',
            settings: this.settings
          });
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫, –≥–¥–µ –Ω–µ—Ç content-—Å–∫—Ä–∏–ø—Ç–∞
        }
      }
      console.log('üì¢ Background: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º content-—Å–∫—Ä–∏–ø—Ç–∞–º');
    } catch (error) {
      console.error('‚ùå Background: –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è content-—Å–∫—Ä–∏–ø—Ç–æ–≤:', error);
    }
  }

  // PRO —Ñ—É–Ω–∫—Ü–∏–∏
  scheduleSync() {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    const now = Date.now();
    const lastSync = this.settings.lastSync || 0;
    const syncInterval = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

    if (now - lastSync > syncInterval) {
      this.syncWithRegistry();
    }

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    setTimeout(() => {
      this.scheduleSync();
    }, syncInterval);
  }

  async syncWithRegistry() {
    if (!this.settings.proVersion) return;

    try {
      console.log('SafeLink PRO: –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Ä–µ–µ—Å—Ç—Ä–æ–º...');
      
      // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —Ä–µ–µ—Å—Ç—Ä–∞
      // const response = await fetch('https://api.safelink.com/registry/blocked-sites');
      // const data = await response.json();
      
      // –ü–æ–∫–∞ —á—Ç–æ —ç–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const simulatedResponse = {
        blocked_sites: [
          'malicious-site.com',
          'phishing-example.net',
          'fake-bank.org'
        ],
        updated_at: new Date().toISOString()
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      const result = await chrome.storage.local.get(['custom_blocked_sites']);
      const customBlocked = result.custom_blocked_sites || [];
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–ø–∏—Å–∫–æ–º
      const newBlockedSites = [...new Set([...customBlocked, ...simulatedResponse.blocked_sites])];
      
      await chrome.storage.local.set({ 
        registry_blocked_sites: simulatedResponse.blocked_sites,
        registry_updated: simulatedResponse.updated_at
      });

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏
      await this.loadBlockedSites();
      
      this.settings.lastSync = Date.now();
      await this.saveSettings();
      
      console.log('SafeLink PRO: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('SafeLink PRO: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
  checkSearchQuery(url) {
    try {
      const urlObj = new URL(url);
      const domain = urlObj.hostname.toLowerCase();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
      const isSearchEngine = this.searchEngines.has(domain) || 
                            Array.from(this.searchEngines).some(engine => domain.includes(engine));
      
      if (!isSearchEngine) {
        return { blocked: false, reason: 'not_search_engine' };
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ URL
      const searchQuery = this.extractSearchQuery(url, domain);
      
      if (!searchQuery) {
        return { blocked: false, reason: 'no_query' };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
      const phraseCheck = this.isPhraseBlocked(searchQuery);
      
      if (phraseCheck.blocked) {
        return {
          blocked: true,
          phrase: phraseCheck.phrase,
          category: phraseCheck.category,
          query: searchQuery,
          searchEngine: domain,
          reason: 'blocked_phrase'
        };
      }
      
      return { blocked: false, reason: 'phrase_allowed' };
      
    } catch (error) {
      console.error('SafeLink: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return { blocked: false, reason: 'error' };
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ URL —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
  extractSearchQuery(url, domain) {
    const urlObj = new URL(url);
    const params = urlObj.searchParams;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
    const queryParams = {
      'google.com': 'q',
      'google.ru': 'q',
      'yandex.ru': 'text',
      'yandex.com': 'text',
      'bing.com': 'q',
      'mail.ru': 'q',
      'rambler.ru': 'query',
      'yahoo.com': 'p',
      'duckduckgo.com': 'q'
    };
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    let queryParam = 'q'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for (const [engine, param] of Object.entries(queryParams)) {
      if (domain.includes(engine)) {
        queryParam = param;
        break;
      }
    }
    
    const query = params.get(queryParam);
    return query ? decodeURIComponent(query).toLowerCase().trim() : null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–∞–∑—ã –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
  isPhraseBlocked(query) {
    if (!query || query.length < 3) {
      return { blocked: false, reason: 'too_short' };
    }
    
    const normalizedQuery = query.toLowerCase().trim();
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (this.blockedPhrases.has(normalizedQuery)) {
      return {
        blocked: true,
        phrase: normalizedQuery,
        category: this.findPhraseCategory(normalizedQuery),
        matchType: 'exact'
      };
    }
    
    // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if (this.settings.phraseSensitivity !== 'strict') {
      for (const blockedPhrase of this.blockedPhrases) {
        if (blockedPhrase.length >= 4) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã –≤ –∑–∞–ø—Ä–æ—Å
          if (normalizedQuery.includes(blockedPhrase)) {
            return {
              blocked: true,
              phrase: blockedPhrase,
              category: this.findPhraseCategory(blockedPhrase),
              matchType: 'partial'
            };
          }
          
          // –ï—Å–ª–∏ —Ä–µ–∂–∏–º "loose", –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞—Ç–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
          if (this.settings.phraseSensitivity === 'loose' && blockedPhrase.includes(normalizedQuery)) {
            return {
              blocked: true,
              phrase: blockedPhrase,
              category: this.findPhraseCategory(blockedPhrase),
              matchType: 'contained'
            };
          }
        }
      }
    }
    
    return { blocked: false, reason: 'not_found' };
  }

  // –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—Ä–∞–∑—ã
  findPhraseCategory(phrase) {
    for (const [category, phrases] of Object.entries(this.phraseCategories)) {
      if (phrases && phrases.includes(phrase)) {
        return category;
      }
    }
    return 'general';
  }

  async loadPhrasesFromMinJust() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥)
      const now = Date.now();
      if (now - this.lastMinJustRequest < this.minJustRequestDelay) {
        console.log(`‚è∞ SafeLink: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ú–∏–Ω—é—Å—Ç—É (–æ—Å—Ç–∞–ª–æ—Å—å ${Math.ceil((this.minJustRequestDelay - (now - this.lastMinJustRequest)) / 1000)}—Å)`);
        return this.getCachedPhrases();
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–æ–±–Ω–æ–≤–ª—è–µ–º –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)
      const cacheKey = 'safelink_minjust_phrases';
      const cacheTimestampKey = 'safelink_minjust_timestamp';
      const cached = await chrome.storage.local.get([cacheKey, cacheTimestampKey]);
      
      const cacheAge = now - (cached[cacheTimestampKey] || 0);
      const oneDayMs = 24 * 60 * 60 * 1000;
      
      if (cached[cacheKey] && cacheAge < oneDayMs) {
        console.log(`üíæ SafeLink: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.round(cacheAge / (60 * 60 * 1000))}—á)`);
        return new Set(cached[cacheKey]);
      }
      
      console.log('üåê SafeLink: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ —Ñ—Ä–∞–∑—ã —Å minjust.gov.ru...');
      this.lastMinJustRequest = now;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º CSV —Å —Å–∞–π—Ç–∞ –ú–∏–Ω—é—Å—Ç–∞
      const response = await fetch('https://minjust.gov.ru/uploaded/files/exportfsm.csv', {
        method: 'GET',
        headers: {
          'User-Agent': 'SafeLink Browser Extension',
          'Accept': 'text/csv,text/plain,*/*'
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ ArrayBuffer –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
      const arrayBuffer = await response.arrayBuffer();
      console.log(`üìã SafeLink: –ü–æ–ª—É—á–µ–Ω CSV —Ä–∞–∑–º–µ—Ä–æ–º ${Math.round(arrayBuffer.byteLength / 1024)}KB`);
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º Windows-1251 (CP1251) –≤ UTF-8
      const csvText = this.decodeWindows1251(arrayBuffer);
      console.log(`üî§ SafeLink: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –≤ UTF-8, –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: "${csvText.substring(0, 200)}..."`);
      
             // –ü–∞—Ä—Å–∏–º CSV –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∑—ã –∏ URL-—ã
       const { phrases: newPhrases, blockedUrls } = await this.parseMinJustCSV(csvText);
       
       if (newPhrases.size > 0) {
         // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
         const existingPhrases = cached[cacheKey] || [];
         const existingSet = new Set(existingPhrases);
         
         let addedCount = 0;
         newPhrases.forEach(phrase => {
           if (!existingSet.has(phrase)) {
             existingSet.add(phrase);
             addedCount++;
           }
         });
         
         const finalPhrases = Array.from(existingSet);
         
         // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
         await chrome.storage.local.set({
           [cacheKey]: finalPhrases,
           [cacheTimestampKey]: now
         });
         
         // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
         this.settings.lastPhraseUpdate = now;
         await this.saveSettings();
         
         // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ URL-—ã –≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã
         if (blockedUrls && blockedUrls.size > 0) {
           await this.addUrlsToBlockedSites(blockedUrls);
         }
         
         console.log(`‚úÖ SafeLink: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${newPhrases.size} –Ω–æ–≤—ã—Ö —Ñ—Ä–∞–∑, –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö, –∏—Ç–æ–≥–æ –≤ –±–∞–∑–µ ${finalPhrases.length}, URL-–æ–≤: ${blockedUrls?.size || 0}`);
        return { phrases: new Set(finalPhrases), blockedUrls };
       } else {
         throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ—Ä–∞–∑—ã –∏–∑ CSV');
       }
      
    } catch (error) {
      console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑ —Å –ú–∏–Ω—é—Å—Ç–∞:', error);
      const cachedPhrases = await this.getCachedPhrases();
      return { phrases: cachedPhrases, blockedUrls: new Set() };
    }
  }

  async getCachedPhrases() {
    try {
      const cached = await chrome.storage.local.get(['safelink_minjust_phrases']);
      if (cached.safelink_minjust_phrases) {
        console.log('üíæ SafeLink: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
        return new Set(cached.safelink_minjust_phrases);
      }
    } catch (error) {
      console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑:', error);
    }
    return null;
  }

  async parseMinJustCSV(csvText) {
    try {
      console.log(`üìã SafeLink: –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ CSV...`);
      
      const lines = csvText.split('\n');
      const records = [];
      let currentRecord = '';
      let recordId = '';
      
      // –ü–∞—Ä—Å–∏–º CSV –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        if (!line) continue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞ –∑–∞–ø–∏—Å–∏
        const recordMatch = line.match(/^(\d+);"(.*)$/);
        
        if (recordMatch) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
          if (currentRecord && recordId) {
            records.push({ id: recordId, content: currentRecord });
          }
          
          // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
          recordId = recordMatch[1];
          currentRecord = recordMatch[2];
        } else {
          // –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
          if (currentRecord) {
            currentRecord += ' ' + line;
          }
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
      if (currentRecord && recordId) {
        records.push({ id: recordId, content: currentRecord });
      }
      
      console.log(`üìã SafeLink: –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${records.length}`);
      
      let processed = 0;
      let extracted = 0;
      let extractedUrls = 0;
      let validRecords = 0;
      
      const phrases = new Set();
      const blockedUrls = new Set();
      
      for (const record of records) {
        processed++;
        
        if (processed % 1000 === 0) {
          console.log(`üîÑ SafeLink: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed}/${records.length} –∑–∞–ø–∏—Å–µ–π, –≤–∞–ª–∏–¥–Ω—ã—Ö: ${validRecords}, —Ñ—Ä–∞–∑: ${extracted}, URL-–æ–≤: ${extractedUrls}`);
        }
        
        try {
          let material = record.content;
          
          // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É –∏ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
          material = material.replace(/";?\s*$/, '');
          
          if (material && material.length > 0) {
            validRecords++;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            const materialPhrases = this.extractKeyPhrases(material);
            
            materialPhrases.forEach(phrase => {
              if (phrase.length >= 3 && phrase.length <= 200) {
                phrases.add(phrase);
                extracted++;
              }
            });
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º URL-—ã –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            const materialUrls = this.extractUrls(material);
            materialUrls.forEach(url => {
              blockedUrls.add(url);
              extractedUrls++;
            });
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (processed <= 5) {
              console.log(`üìù –ó–∞–ø–∏—Å—å ${record.id}: —Ñ—Ä–∞–∑: ${materialPhrases.length}, URL-–æ–≤: ${materialUrls.length}`);
              if (materialPhrases.length > 0 || materialUrls.length > 0) {
                console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: "${material.substring(0, 120)}..."`);
                if (materialPhrases.length > 0) {
                  console.log(`   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã: ${materialPhrases.slice(0, 3).join(', ')}${materialPhrases.length > 3 ? '...' : ''}`);
                }
                if (materialUrls.length > 0) {
                  console.log(`   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ URL-—ã: ${materialUrls.slice(0, 3).join(', ')}${materialUrls.length > 3 ? '...' : ''}`);
                }
              } else {
                console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: "${material.substring(0, 120)}..."`);
                console.log(`   ‚Üí –ù–µ—Ç —Ñ—Ä–∞–∑ –≤ –∫–∞–≤—ã—á–∫–∞—Ö –∏–ª–∏ URL-–æ–≤`);
              }
            }
          }
        } catch (recordError) {
          console.warn(`‚ö†Ô∏è SafeLink: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ ${record.id}:`, recordError.message);
        }
      }
      
      console.log(`‚úÖ SafeLink: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
      console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${processed}`);
      console.log(`üìä –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${validRecords}`);
      console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ñ—Ä–∞–∑: ${extracted}`);
      console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑: ${phrases.size}`);
      console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ URL-–æ–≤: ${extractedUrls}`);
      console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL-–æ–≤: ${blockedUrls.size}`);
      
      return { phrases, blockedUrls };
      
    } catch (error) {
      console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV:', error);
      return { phrases: new Set(), blockedUrls: new Set() };
    }
  }

  parseCSVLine(line) {
    const fields = [];
    let current = '';
    let inQuotes = false;
    let i = 0;
    
    while (i < line.length) {
      const char = line[i];
      
      if (char === '"') {
        inQuotes = !inQuotes;
      } else if (char === ',' && !inQuotes) {
        fields.push(current);
        current = '';
      } else {
        current += char;
      }
      i++;
    }
    
    fields.push(current); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ
    return fields;
  }

  extractKeyPhrases(text) {
    if (!text || typeof text !== 'string') return [];
    
    const phrases = [];
    
    // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ CSV (""–Ω–∞–∑–≤–∞–Ω–∏–µ"")
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    const doubleQuotedPattern = /""([^"]+(?:"[^"]*)?)"/g;
    let match;
    while ((match = doubleQuotedPattern.exec(text)) !== null) {
      let phrase = match[1];
      
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
      phrase = phrase.replace(/"/g, '').trim();
      
      // –û—á–∏—â–∞–µ–º –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –ø–æ –∫—Ä–∞—è–º
      phrase = phrase.replace(/^[^\w\u0400-\u04FF\u0500-\u052F]+/, '');
      phrase = phrase.replace(/[^\w\u0400-\u04FF\u0500-\u052F]+$/, '');
      phrase = phrase.replace(/\s+/g, ' ').trim();
      
              if (phrase.length >= 5 && phrase.length <= 200 && !this.isStopWord(phrase) && !this.isException(phrase)) {
          phrases.push(phrase.toLowerCase());
        }
    }
    
    // –ó–∞—Ç–µ–º –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å –¥–≤–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏)
    let cleanedText = text;
    // –£–±–∏—Ä–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ —Å –¥–≤–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
    cleanedText = cleanedText.replace(/""[^"]*""/g, ' ');
    
    const quotedPatterns = [
      /"([^"]{5,200})"/g,     // –û–±—ã—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏: "—Ñ—Ä–∞–∑–∞"
      /¬´([^¬ª]{5,200})¬ª/g,     // –†—É—Å—Å–∫–∏–µ –∫–∞–≤—ã—á–∫–∏: ¬´—Ñ—Ä–∞–∑–∞¬ª
      /'([^']{5,200})'/g,     // –û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏: '—Ñ—Ä–∞–∑–∞'
      /‚Äö([^‚Äö]{5,200})‚Äö/g,     // –ù–∏–∂–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏: ‚Äö—Ñ—Ä–∞–∑–∞‚Äö
      /‚Äû([^"]{5,200})"/g,     // –ù–µ–º–µ—Ü–∫–∏–µ –∫–∞–≤—ã—á–∫–∏: ‚Äû—Ñ—Ä–∞–∑–∞"
      /„Äå([^„Äç]{5,200})„Äç/g    // –Ø–ø–æ–Ω—Å–∫–∏–µ –∫–∞–≤—ã—á–∫–∏: „Äå—Ñ—Ä–∞–∑–∞„Äç
    ];
    
    quotedPatterns.forEach(pattern => {
      let match;
      while ((match = pattern.exec(cleanedText)) !== null) {
        let phrase = match[1].trim();
        
        // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        phrase = phrase.replace(/^[^\w\u0400-\u04FF\u0500-\u052F]+/, '');
        phrase = phrase.replace(/[^\w\u0400-\u04FF\u0500-\u052F]+$/, '');
        phrase = phrase.replace(/\s+/g, ' ').trim();
        
        if (phrase.length >= 5 && phrase.length <= 200 && !this.isStopWord(phrase) && !this.isException(phrase)) {
          phrases.push(phrase.toLowerCase());
        }
      }
    });
    
    return [...new Set(phrases)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }

  isException(phrase) {
    if (!phrase || typeof phrase !== 'string') return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
    const lowerPhrase = phrase.toLowerCase().trim();
    return this.phrasesExceptions.has(lowerPhrase);
  }

  isStopWord(phrase) {
    const stopWords = [
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–≥–∏ –∏ —Å–æ—é–∑—ã
      '–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–ø—Ä–∏', '–∑–∞', '–ø–æ–¥', '–Ω–∞–¥', '–æ', '–æ–±', '–∫', '—É',
      '–∏–∑', '–±–µ–∑', '—á–µ—Ä–µ–∑', '–º–µ–∂–¥—É', '—Å—Ä–µ–¥–∏', '–æ–∫–æ–ª–æ', '–≤–æ–∑–ª–µ', '–ø—Ä–æ—Ç–∏–≤', '–≤–º–µ—Å—Ç–æ', '–∫—Ä–æ–º–µ',
      '–∏–ª–∏', '–Ω–æ', '–∞', '–¥–∞', '–∂–µ', '–ª–∏', '–±—ã', '–Ω–∏', '–Ω–µ', '—Ç–æ', '—Ç–∞–∫', '—É–∂–µ', '–µ—â–µ', '—Ç–æ–∂–µ',
      // –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è
      '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–æ—Ç–æ—Ä–∞—è', '–∫–æ—Ç–æ—Ä–æ–µ', '–∫–æ—Ç–æ—Ä—ã–µ',
      '—ç—Ç–æ', '—Ç–æ—Ç', '—Ç–∞', '—Ç–æ', '—Ç–µ', '—Å–≤–æ–π', '—Å–≤–æ—è', '—Å–≤–æ–µ', '—Å–≤–æ–∏', '–º–æ–π', '–º–æ—è', '–º–æ–µ', '–º–æ–∏',
      '–µ–≥–æ', '–µ—ë', '–∏—Ö', '–Ω–∞—à', '–Ω–∞—à–∞', '–Ω–∞—à–µ', '–Ω–∞—à–∏', '–≤–∞—à', '–≤–∞—à–∞', '–≤–∞—à–µ', '–≤–∞—à–∏',
      // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (—á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö)
      '–Ω–æ–º–µ—Ä', '–ø—É–Ω–∫—Ç', '—Å—Ç–∞—Ç—å—è', '—á–∞—Å—Ç—å', '—Ä–∞–∑–¥–µ–ª', '–≥–ª–∞–≤–∞', '–∞–±–∑–∞—Ü', '–ø–æ–¥–ø—É–Ω–∫—Ç', '–ø', '—Å—Ç',
      '—Ä–æ—Å—Å–∏–π—Å–∫–æ–π', '—Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏', '—Ä—Ñ', '–∫–æ–¥–µ–∫—Å', '–∑–∞–∫–æ–Ω', '—É–∫–∞–∑', '–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', '—Ä–µ—à–µ–Ω–∏–µ',
      // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
      'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by',
      // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ (1-2 —Å–∏–º–≤–æ–ª–∞)
      '–¥–æ', '–Ω–∞', '–ø–æ', '–∑–∞', '–∏–∑', '–æ—Ç', '–æ–±', '—Å–æ', '–≤–æ', '–∫–æ'
    ];
    
    const lowerPhrase = phrase.toLowerCase().trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (stopWords.includes(lowerPhrase)) {
      return true;
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã (–º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤)
    if (lowerPhrase.length < 3) {
      return true;
    }
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Ñ—Ä–∞–∑—ã —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if (/^[\d\s\-‚Ññ¬´¬ª"".,;:!?()]+$/.test(lowerPhrase)) {
      return true;
    }
    
    return false;
  }

  isNumber(phrase) {
    return /^\d+$/.test(phrase) || /^\d+[\.,]\d+$/.test(phrase);
  }

  extractUrls(text) {
    if (!text || typeof text !== 'string') return [];
    
    const urls = [];
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª–Ω—ã—Ö URL-–æ–≤
    const urlPatterns = [
      // http:// –∏ https:// —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º
      /https?:\/\/([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}([\/\w\.-]*)*\/?/g,
      // www.domain.com —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º
      /www\.([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}([\/\w\.-]*)*\/?/g
    ];
    
    urlPatterns.forEach(pattern => {
      let match;
      while ((match = pattern.exec(text)) !== null) {
        let url = match[0];
        
        // –û—á–∏—â–∞–µ–º URL –æ—Ç –∫–∞–≤—ã—á–µ–∫
        url = url.replace(/['"]/g, '');
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å
        url = url.replace(/^https?:\/\//, '');
        url = url.replace(/^www\./, '');
        
        // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω
        if (url.indexOf('/') === -1) {
          url = url.replace(/\/$/, '');
        }
        
        // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        url = url.replace(/\.$/, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL
        if (this.isValidUrl(url)) {
          urls.push(url.toLowerCase());
        }
      }
    });
    
    return [...new Set(urls)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }

  isValidUrl(url) {
    if (!url || typeof url !== 'string') return false;
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–æ–º–µ–Ω –∏ –ø—É—Ç—å
    const parts = url.split('/');
    const domain = parts[0];
    const path = parts.slice(1).join('/');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω
    if (!this.isValidDomain(domain)) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (path) {
      // –ü—É—Ç—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
      const pathRegex = /^[a-zA-Z0-9\/\-._~:?#[\]@!$&'()*+,;=%]*$/;
      if (!pathRegex.test(path)) return false;
      
      // –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å
      if (path.length > 2000) return false;
    }
    
    // –û–±—â–∞—è –¥–ª–∏–Ω–∞ URL
    if (url.length > 2083) return false;
    
    return true;
  }

  isValidDomain(domain) {
    if (!domain || typeof domain !== 'string') return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
    const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*\.[a-zA-Z]{2,}$/;
    
    if (!domainRegex.test(domain)) return false;
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    if (domain.length < 4 || domain.length > 253) return false;
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –¥–æ–º–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≤–µ–±-—Å–∞–π—Ç–∞–º–∏
    const excludePatterns = [
      /^\d+\.\d+\.\d+\.\d+$/, // IP –∞–¥—Ä–µ—Å–∞
      /^localhost$/i,
      /^127\.0\.0\.1$/,
      /\.local$/i,
      /\.test$/i,
      /\.example$/i
    ];
    
    return !excludePatterns.some(pattern => pattern.test(domain));
  }

  decodeWindows1251(arrayBuffer) {
    try {
      // –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è Windows-1251 (CP1251) —Å–∏–º–≤–æ–ª–æ–≤
      // –ü–æ–∑–∏—Ü–∏–∏ 128-255 —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      const cp1251Table = [
        0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021, // 128-135
        0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F, // 136-143
        0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, // 144-151
        0x0098, 0x2122, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F, // 152-159
        0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7, // 160-167
        0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407, // 168-175
        0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7, // 176-183
        0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457, // 184-191
        0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, // 192-199 (–ê-–ó)
        0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, // 200-207 (–ò-–ü)
        0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, // 208-215 (–†-–ß)
        0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, // 216-223 (–®-–Ø)
        0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, // 224-231 (–∞-–∑)
        0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, // 232-239 (–∏-–ø)
        0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, // 240-247 (—Ä-—á)
        0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F  // 248-255 (—à-—è)
      ];
      
      const uint8Array = new Uint8Array(arrayBuffer);
      let result = '';
      
      for (let i = 0; i < uint8Array.length; i++) {
        const byte = uint8Array[i];
        
        if (byte < 128) {
          // ASCII —Å–∏–º–≤–æ–ª—ã (0-127) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          result += String.fromCharCode(byte);
        } else {
          // –°–∏–º–≤–æ–ª—ã 128-255 –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–æ —Ç–∞–±–ª–∏—Ü–µ CP1251
          const unicodeCodePoint = cp1251Table[byte - 128];
          result += String.fromCharCode(unicodeCodePoint);
        }
      }
      
      console.log(`üî§ SafeLink: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ ${uint8Array.length} –±–∞–π—Ç –∏–∑ CP1251 –≤ UTF-8`);
      return result;
      
    } catch (error) {
      console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è CP1251:', error);
      // Fallback - –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ UTF-8
      const decoder = new TextDecoder('utf-8', { fatal: false });
      return decoder.decode(arrayBuffer);
    }
  }

  async initializePhrases() {
    try {
      const cached = await chrome.storage.local.get(['safelink_minjust_phrases', 'safelink_initialized']);
      const currentPhrases = cached.safelink_minjust_phrases || [];
      const isInitialized = cached.safelink_initialized;
      
      // –ï—Å–ª–∏ —Ñ—Ä–∞–∑ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –æ—á–∏—â–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
      if (currentPhrases.length > 50000 || !isInitialized) {
        console.log(`üîÑ SafeLink: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–∞–∑. –°—Ç–∞—Ä—ã—Ö —Ñ—Ä–∞–∑: ${currentPhrases.length}, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${isInitialized}`);
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—Ä–∞–∑—ã
        await chrome.storage.local.remove(['safelink_minjust_phrases', 'safelink_minjust_timestamp']);
        console.log('üóëÔ∏è SafeLink: –°—Ç–∞—Ä—ã–µ —Ñ—Ä–∞–∑—ã –æ—á–∏—â–µ–Ω—ã');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try {
          await this.loadPhrasesFromLocalFile();
          
          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
          await chrome.storage.local.set({ 'safelink_initialized': true });
          console.log('‚úÖ SafeLink: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
          console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
        }
      } else {
        console.log(`‚úÖ SafeLink: –§—Ä–∞–∑—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (${currentPhrases.length} —Ñ—Ä–∞–∑)`);
        this.blockedPhrases = new Set(currentPhrases);
      }
    } catch (error) {
      console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–∞–∑:', error);
    }
  }

  async updateLocalCSVFile() {
    try {
      console.log('üåê SafeLink: –°–∫–∞—á–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–π CSV —Å minjust.gov.ru...');
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–π CSV —Å —Å–∞–π—Ç–∞ –ú–∏–Ω—é—Å—Ç–∞
      const response = await fetch('https://minjust.gov.ru/uploaded/files/exportfsm.csv', {
        method: 'GET',
        headers: {
          'User-Agent': 'SafeLink Browser Extension',
          'Accept': 'text/csv,text/plain,*/*'
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ ArrayBuffer
      const arrayBuffer = await response.arrayBuffer();
      console.log(`üìä SafeLink: –°–∫–∞—á–∞–Ω CSV —Ä–∞–∑–º–µ—Ä–æ–º ${Math.round(arrayBuffer.byteLength / 1024)} KB`);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ArrayBuffer –≤ base64 –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
      const uint8Array = new Uint8Array(arrayBuffer);
      let binaryString = '';
      const chunkSize = 8192; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 8KB –∑–∞ —Ä–∞–∑
      
      for (let i = 0; i < uint8Array.length; i += chunkSize) {
        const chunk = uint8Array.slice(i, i + chunkSize);
        binaryString += String.fromCharCode.apply(null, chunk);
      }
      
      const base64String = btoa(binaryString);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ chrome.storage.local —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
      await chrome.storage.local.set({
        'safelink_local_csv': base64String,
        'safelink_csv_updated': Date.now()
      });
      
      console.log('üíæ SafeLink: –õ–æ–∫–∞–ª—å–Ω—ã–π CSV —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω');
      return true;
      
    } catch (error) {
      console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  async loadPhrasesExceptions() {
    try {
      console.log('üìã SafeLink: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–∞–∑—ã-–∏—Å–∫–ª—é—á–µ–Ω–∏—è...');
      
      const response = await fetch(chrome.runtime.getURL('phrases-exceptions.json'));
      if (!response.ok) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–π: ${response.status}`);
      }
      
      const data = await response.json();
      this.phrasesExceptions = new Set(data.exceptions.map(phrase => phrase.toLowerCase()));
      
      console.log(`‚úÖ SafeLink: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.phrasesExceptions.size} —Ñ—Ä–∞–∑-–∏—Å–∫–ª—é—á–µ–Ω–∏–π`);
      return this.phrasesExceptions;
      
    } catch (error) {
      console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:', error);
      this.phrasesExceptions = new Set(); // –ü—É—Å—Ç–æ–π Set –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return this.phrasesExceptions;
    }
  }

  async getLocalFileInfo() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º CSV –∏–∑ storage
      const stored = await chrome.storage.local.get(['safelink_csv_updated']);
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è)
      const originalFileDate = new Date('2024-07-22T14:38:00'); // –î–∞—Ç–∞ –∏–∑ ls -la exportfsm.csv
      
      if (stored.safelink_csv_updated) {
        // –ï—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        const updateDate = new Date(stored.safelink_csv_updated);
        return {
          hasUpdatedFile: true,
          isLocal: false,
          lastUpdate: updateDate,
          displayText: `üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω: ${updateDate.toLocaleDateString('ru-RU')} ${updateDate.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})})`
        };
      } else {
        // –¢–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        return {
          hasUpdatedFile: false,
          isLocal: true,
          lastUpdate: originalFileDate,
          displayText: `üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç ${originalFileDate.toLocaleDateString('ru-RU')})`
        };
      }
    } catch (error) {
      console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:', error);
      return {
        hasUpdatedFile: false,
        isLocal: true,
        lastUpdate: null,
        displayText: 'üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π)'
      };
    }
  }

  async loadPhrasesFromLocalFile() {
    try {
      console.log('üìÅ SafeLink: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ exportfsm.csv...');
      
      let arrayBuffer;
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CSV –∏–∑ storage
      try {
        const stored = await chrome.storage.local.get(['safelink_local_csv', 'safelink_csv_updated']);
        if (stored.safelink_local_csv) {
          console.log('üíæ SafeLink: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CSV –∏–∑ storage');
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ ArrayBuffer
          const binaryString = atob(stored.safelink_local_csv);
          arrayBuffer = new ArrayBuffer(binaryString.length);
          const uint8Array = new Uint8Array(arrayBuffer);
          for (let i = 0; i < binaryString.length; i++) {
            uint8Array[i] = binaryString.charCodeAt(i);
          }
          const updateTime = new Date(stored.safelink_csv_updated).toLocaleString();
          console.log(`üìÖ SafeLink: CSV –æ–±–Ω–æ–≤–ª–µ–Ω: ${updateTime}`);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è SafeLink: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV –∏–∑ storage:', error);
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ CSV, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      if (!arrayBuffer) {
        console.log('üìÅ SafeLink: –ó–∞–≥—Ä—É–∂–∞–µ–º CSV –∏–∑ —Ñ–∞–π–ª–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
        const response = await fetch(chrome.runtime.getURL('exportfsm.csv'));
        
        if (!response.ok) {
          throw new Error(`–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${response.status}`);
        }
        
        arrayBuffer = await response.arrayBuffer();
      }
      
      console.log(`üìä SafeLink: –ó–∞–≥—Ä—É–∂–µ–Ω CSV, —Ä–∞–∑–º–µ—Ä: ${Math.round(arrayBuffer.byteLength / 1024)} KB`);
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º CP1251 –≤ UTF-8 (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
      const csvText = this.decodeWindows1251(arrayBuffer);
      
      // –ü–∞—Ä—Å–∏–º CSV (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
      const { phrases, blockedUrls } = await this.parseMinJustCSV(csvText);
      
      if (phrases && phrases.size > 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—ã –≤ –∫—ç—à
        await chrome.storage.local.set({
          'safelink_minjust_phrases': Array.from(phrases),
          'safelink_minjust_timestamp': Date.now()
        });
        
        this.blockedPhrases = phrases;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ URL-—ã –≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã
        if (blockedUrls && blockedUrls.size > 0) {
          await this.addUrlsToBlockedSites(blockedUrls);
        }
        
        console.log(`‚úÖ SafeLink: –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ—Ä–∞–∑—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${phrases.size} —Ñ—Ä–∞–∑, URL-–æ–≤: ${blockedUrls?.size || 0}`);
        return { phrases, blockedUrls };
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ—Ä–∞–∑—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
      }
      
    } catch (error) {
      console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  async addUrlsToBlockedSites(blockedUrls) {
    try {
      if (!blockedUrls || blockedUrls.size === 0) return;
      
      console.log(`üåê SafeLink: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${blockedUrls.size} URL-–æ–≤ –∏–∑ CSV...`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ø–∏—Å–∫–∏
      const result = await chrome.storage.local.get(['custom_blocked_sites', 'custom_allowed_sites']);
      const currentBlocked = new Set(result.custom_blocked_sites || []);
      const currentAllowed = new Set(result.custom_allowed_sites || []);
      
      let addedCount = 0;
      let skippedCount = 0;
      const addedUrls = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º URL-—ã –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö
      for (const url of blockedUrls) {
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ URL —É–∂–µ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        if (!currentBlocked.has(url) && !currentAllowed.has(url)) {
          currentBlocked.add(url);
          addedUrls.push(url);
          addedCount++;
        } else {
          skippedCount++;
        }
      }
      
      if (addedCount > 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await chrome.storage.local.set({
          'custom_blocked_sites': Array.from(currentBlocked)
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        this.blockedSites = currentBlocked;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö URL-–æ–≤
        const examples = addedUrls.slice(0, 3);
        const hasMore = addedUrls.length > 3;
        
        console.log(`‚úÖ SafeLink: –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –Ω–æ–≤—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö URL-–æ–≤ –∏–∑ CSV`);
        console.log(`üìã –ü—Ä–∏–º–µ—Ä—ã: ${examples.join(', ')}${hasMore ? '...' : ''}`);
        
        if (skippedCount > 0) {
          console.log(`‚ÑπÔ∏è SafeLink: ${skippedCount} URL-–æ–≤ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Å–ø–∏—Å–∫–∞—Ö`);
        }
      } else {
        console.log(`‚ÑπÔ∏è SafeLink: –í—Å–µ URL-—ã –∏–∑ CSV —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö`);
      }
      
    } catch (error) {
      console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL-–æ–≤ –≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã:', error);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup –∏ content scripts
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('üì® Background –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', request);

  (async () => {
    try {
      switch (request.action) {
        case 'getSettings':
          sendResponse(safeLinkCore.settings);
          break;

        case 'updateSettings':
          console.log('üì® Background: updateSettings received:', request);
          if (request.settings) {
            try {
              await safeLinkCore.updateSettings(request.settings);
              sendResponse({ success: true });
            } catch (error) {
              console.error('‚ùå Background: updateSettings failed:', error);
              sendResponse({ success: false, error: error.message });
            }
          } else {
            console.log('‚ùå No settings provided in request');
            sendResponse({ success: false, error: 'No settings provided' });
          }
          break;

        case 'reloadSiteLists':
          console.log('üîÑ Background: reloadSiteLists received');
          try {
            await safeLinkCore.loadBlockedSites();
            console.log(`‚úÖ –°–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${safeLinkCore.blockedSites.size} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, ${safeLinkCore.allowedSites.size} —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö`);
            sendResponse({ 
              success: true, 
              blockedCount: safeLinkCore.blockedSites.size,
              allowedCount: safeLinkCore.allowedSites.size
            });
          } catch (error) {
            console.error('‚ùå Background: reloadSiteLists failed:', error);
            sendResponse({ success: false, error: error.message });
          }
                    break;
          
        case 'clearAllPhrases':
          console.log('üóëÔ∏è Background: clearAllPhrases received');
          try {
            // –û—á–∏—â–∞–µ–º —Ñ—Ä–∞–∑—ã –≤ –ø–∞–º—è—Ç–∏
            safeLinkCore.blockedPhrases = new Set();
            
            // –û—á–∏—â–∞–µ–º –∏–∑ storage
            await chrome.storage.local.remove([
              'safelink_minjust_phrases',
              'safelink_minjust_timestamp'
            ]);
            
            console.log('‚úÖ –í—Å–µ —Ñ—Ä–∞–∑—ã –æ—á–∏—â–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏ –∏ storage');
            sendResponse({ 
              success: true, 
              message: '–í—Å–µ —Ñ—Ä–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã'
            });
          } catch (error) {
            console.error('‚ùå Background: clearAllPhrases failed:', error);
            sendResponse({ success: false, error: error.message });
          }
          break;
          
        case 'addDefaultAllowedSites':
          console.log('üì± Background: addDefaultAllowedSites received');
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é —á—Ç–æ –∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
            const result = await initializeDefaultAllowedSites();
            
            let message;
            if (result.addedCount > 0) {
              message = `–î–æ–±–∞–≤–ª–µ–Ω–æ ${result.addedCount} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∞–π—Ç–æ–≤. –í—Å–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö: ${result.totalCount}`;
            } else {
              message = `–í—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∞–π—Ç—ã —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ (–≤—Å–µ–≥–æ: ${result.totalCount})`;
            }
            
            sendResponse({ 
              success: true, 
              message: message,
              addedCount: result.addedCount,
              totalCount: result.totalCount
            });
          } catch (error) {
            console.error('‚ùå Background: addDefaultAllowedSites failed:', error);
            sendResponse({ success: false, error: error.message });
          }
          break;
          
        case 'getLocalFileInfo':
          console.log('üìã Background: getLocalFileInfo received');
          try {
            const fileInfo = await safeLinkCore.getLocalFileInfo();
            sendResponse({ 
              success: true, 
              fileInfo: fileInfo
            });
          } catch (error) {
            console.error('‚ùå Background: getLocalFileInfo failed:', error);
            sendResponse({ success: false, error: error.message });
          }
          break;

        case 'updatePhrasesAndCSV':
          console.log('üîÑ Background: updatePhrasesAndCSV received');
          try {
            // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π CSV —Ñ–∞–π–ª
            await safeLinkCore.updateLocalCSVFile();
            
            // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            const { phrases, blockedUrls } = await safeLinkCore.loadPhrasesFromLocalFile();
            
            if (phrases && phrases.size > 0) {
              safeLinkCore.blockedPhrases = phrases;
              sendResponse({ 
                success: true, 
                count: phrases.size,
                message: 'CSV —Ñ–∞–π–ª –∏ —Ñ—Ä–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
              });
            } else {
              sendResponse({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–∑—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CSV' });
            }
          } catch (error) {
            console.error('‚ùå Background: updatePhrasesAndCSV failed:', error);
            sendResponse({ success: false, error: error.message });
          }
          break;

        case 'loadPhrasesFromLocalFile':
          console.log('üìÅ Background: loadPhrasesFromLocalFile received');
          try {
            const { phrases, blockedUrls } = await safeLinkCore.loadPhrasesFromLocalFile();
            if (phrases && phrases.size > 0) {
              safeLinkCore.blockedPhrases = phrases;
              // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
              await chrome.storage.local.set({ 'safelink_initialized': true });
              sendResponse({ 
                success: true, 
                count: phrases.size,
                message: '–§—Ä–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞'
              });
            } else {
              sendResponse({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞' });
            }
          } catch (error) {
            console.error('‚ùå Background: loadPhrasesFromLocalFile failed:', error);
            sendResponse({ success: false, error: error.message });
          }
          break;
 
        case 'allowSite':
        if (request.url) {
          try {
            const domain = new URL(request.url).hostname;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ
            safeLinkCore.allowedSites.add(domain);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–ø–∏—Å–∫–µ)
            const result = await chrome.storage.local.get(['custom_blocked_sites', 'custom_allowed_sites']);
            let customBlocked = result.custom_blocked_sites || [];
            let customAllowed = result.custom_allowed_sites || [];
            
            // –£–¥–∞–ª—è–µ–º –¥–æ–º–µ–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            const originalLength = customBlocked.length;
            customBlocked = customBlocked.filter(site => site !== domain);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç)
            if (!customAllowed.includes(domain)) {
              customAllowed.push(domain);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
            await chrome.storage.local.set({
              custom_blocked_sites: customBlocked,
              custom_allowed_sites: customAllowed
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º Set –≤ –ø–∞–º—è—Ç–∏
            safeLinkCore.blockedSites.delete(domain);
            
            console.log(`‚úÖ –°–∞–π—Ç ${domain} –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ`);
            if (originalLength !== customBlocked.length) {
              console.log(`üìù –£–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö`);
            }
            
            sendResponse({ success: true });
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–∞–π—Ç–∞:', error);
            sendResponse({ success: false, error: error.message });
          }
        } else {
          sendResponse({ success: false, error: 'No URL provided' });
        }
        break;

      case 'openUrl':
        if (request.url) {
          // –î–æ–±–∞–≤–ª—è–µ–º URL –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö
          const normalizedUrl = safeLinkCore.normalizeUrl(request.url);
          safeLinkCore.ignoredSearchUrls.add(normalizedUrl);
          await safeLinkCore.saveSettings(); // Changed from saveIgnoredUrls to saveSettings
          
          console.log('üîó Background: Opening URL:', request.url);
          
          // –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É, —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
          sendResponse({ success: true, tabCreated: false });
        } else {
          sendResponse({ success: false, error: 'No URL provided' });
        }
        break;

      case 'checkUrl':
        if (request.url) {
          console.log('üîç Content script checking URL:', request.url);
          const result = safeLinkCore.isUrlBlocked(request.url);
          console.log('üîç URL check result:', result);
          sendResponse(result);
        } else {
          sendResponse({ blocked: false, error: 'No URL provided' });
        }
        break;

      case 'checkPhrase':
        if (request.phrase) {
          console.log('üìù Content script checking phrase:', request.phrase);
          const result = safeLinkCore.isPhraseBlocked(request.phrase);
          console.log('üìù Phrase check result:', result);
          sendResponse(result);
        } else {
          sendResponse({ blocked: false, error: 'No phrase provided' });
        }
        break;

      case 'updatePhrasesFromMinJust':
        console.log('üîÑ Manual phrases update requested');
        try {
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          safeLinkCore.lastMinJustRequest = 0;
          const { phrases, blockedUrls } = await safeLinkCore.loadPhrasesFromMinJust();
          if (phrases && phrases.size > 0) {
            safeLinkCore.blockedPhrases = phrases;
            sendResponse({ 
              success: true, 
              count: phrases.size,
              message: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${phrases.size} —Ñ—Ä–∞–∑ –∏–∑ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ú–∏–Ω—é—Å—Ç–∞ –†–§.`
            });
          } else {
            sendResponse({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–∑—ã' });
          }
        } catch (error) {
          console.error('‚ùå Manual phrases update failed:', error);
          sendResponse({ success: false, error: error.message });
        }
        break;

      case 'getPhrasesInfo':
        try {
          const cached = await chrome.storage.local.get(['safelink_minjust_timestamp']);
          const lastUpdate = cached.safelink_minjust_timestamp || 0;
          const age = lastUpdate > 0 ? Date.now() - lastUpdate : 0;
          
          sendResponse({
            success: true,
            phrasesCount: safeLinkCore.blockedPhrases.size,
            lastUpdate: lastUpdate,
            ageHours: Math.round(age / (60 * 60 * 1000)),
            autoUpdate: safeLinkCore.settings.autoUpdatePhrases
          });
        } catch (error) {
          sendResponse({ success: false, error: error.message });
        }
        break;

      case 'testCP1251Decoding':
        try {
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
          console.log('üß™ Testing CP1251 decoding...');
          const testResponse = await fetch('https://minjust.gov.ru/uploaded/files/exportfsm.csv');
          if (testResponse.ok) {
            const arrayBuffer = await testResponse.arrayBuffer();
            const decoded = safeLinkCore.decodeWindows1251(arrayBuffer);
            
            // –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—Ä–∞–∑—É
            const testPhrase = '–¶–µ—Ä–±–µ—Ä—ã —Å–≤–æ–±–æ–¥—ã';
            const found = decoded.toLowerCase().includes(testPhrase.toLowerCase());
            
            const sample = decoded.substring(0, 500);
            sendResponse({
              success: true,
              testPhrase: testPhrase,
              found: found,
              sample: sample,
              sizeKB: Math.round(arrayBuffer.byteLength / 1024)
            });
          } else {
            sendResponse({ success: false, error: `HTTP ${testResponse.status}` });
          }
        } catch (error) {
          sendResponse({ success: false, error: error.message });
        }
        break;

      case 'getPhrasesList':
        try {
          const phrasesArray = Array.from(safeLinkCore.blockedPhrases);
          const page = request.page || 1;
          const limit = request.limit || 50;
          const searchTerm = request.search || '';
          const sortBy = request.sortBy || 'alphabetical';
          
          // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
          let filteredPhrases = phrasesArray;
          if (searchTerm) {
            const searchLower = searchTerm.toLowerCase();
            filteredPhrases = phrasesArray.filter(phrase => 
              phrase.toLowerCase().includes(searchLower)
            );
          }
          
          // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
          switch (sortBy) {
            case 'alphabetical':
              filteredPhrases.sort((a, b) => a.localeCompare(b, 'ru'));
              break;
            case 'length':
              filteredPhrases.sort((a, b) => a.length - b.length);
              break;
            case 'recent':
              // –î–ª—è "recent" –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞–∫ –µ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ)
              break;
          }
          
          // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
          const startIndex = (page - 1) * limit;
          const endIndex = startIndex + limit;
          const paginatedPhrases = filteredPhrases.slice(startIndex, endIndex);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ —Ñ—Ä–∞–∑–∞–º
          const phrasesWithMeta = paginatedPhrases.map(phrase => ({
            text: phrase,
            length: phrase.length,
            words: phrase.split(' ').length,
            type: phrase.split(' ').length === 1 ? '—Å–ª–æ–≤–æ' : '—Ñ—Ä–∞–∑–∞'
          }));
          
          sendResponse({
            success: true,
            phrases: phrasesWithMeta,
            pagination: {
              page: page,
              limit: limit,
              total: filteredPhrases.length,
              totalPages: Math.ceil(filteredPhrases.length / limit),
              hasNext: endIndex < filteredPhrases.length,
              hasPrev: page > 1
            },
            filter: {
              search: searchTerm,
              sortBy: sortBy
            }
          });
        } catch (error) {
          console.error('Error getting phrases list:', error);
          sendResponse({ success: false, error: error.message });
        }
        break;

      default:
        console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', request.action);
        sendResponse({ success: false, error: 'Unknown action' });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    sendResponse({ success: false, error: error.message });
  }
  })(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º IIFE

  return true; // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SafeLink

// –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ chrome.storage –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–æ–≤
chrome.storage.onChanged.addListener((changes, namespace) => {
  if (namespace === 'local') {
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Å–ø–∏—Å–∫–∏ —Å–∞–π—Ç–æ–≤ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
    if (changes.custom_blocked_sites || changes.custom_allowed_sites) {
      console.log('üîÑ Background: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∞—Ö —Å–∞–π—Ç–æ–≤, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...');
      safeLinkCore.loadBlockedSites().then(() => {
        console.log(`‚úÖ Background: –°–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${safeLinkCore.blockedSites.size} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, ${safeLinkCore.allowedSites.size} —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö`);
      }).catch(error => {
        console.error('‚ùå Background: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–æ–≤:', error);
      });
    }
    
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
    if (changes.safelink_settings) {
      console.log('‚öôÔ∏è Background: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
      safeLinkCore.loadSettings().then(() => {
        console.log('‚úÖ Background: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      }).catch(error => {
        console.error('‚ùå Background: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      });
    }
  }
}); 

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
chrome.runtime.onInstalled.addListener(async (details) => {
  console.log('üöÄ SafeLink: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
  if (details.reason === 'install') {
    await initializeDefaultAllowedSites();
  }
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
async function initializeDefaultAllowedSites() {
  try {
    console.log('üìù SafeLink: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
    
    // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultAllowedSites = [
      'vk.com',
      'vkontakte.ru', 
      'ok.ru',
      'odnoklassniki.ru',
      'youtube.com',
      'rutube.ru',
      'telegram.org',
      'instagram.com',
      'facebook.com',
      'twitter.com',
      'tiktok.com'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
    const result = await chrome.storage.local.get(['custom_allowed_sites']);
    let currentAllowed = result.custom_allowed_sites || [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–∞–π—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
    let addedCount = 0;
    for (const site of defaultAllowedSites) {
      if (!currentAllowed.includes(site)) {
        currentAllowed.push(site);
        addedCount++;
      }
    }
    
    if (addedCount > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      await chrome.storage.local.set({
        'custom_allowed_sites': currentAllowed
      });
      
      console.log(`‚úÖ SafeLink: –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
      console.log(`üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã: ${defaultAllowedSites.filter(site => !result.custom_allowed_sites?.includes(site)).join(', ')}`);
      console.log(`üìã –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤: ${currentAllowed.length} —Å–∞–π—Ç–æ–≤`);
      
      return { success: true, addedCount, totalCount: currentAllowed.length };
    } else {
      console.log('‚ÑπÔ∏è SafeLink: –í—Å–µ —Å–∞–π—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö');
      return { success: true, addedCount: 0, totalCount: currentAllowed.length };
    }
    
  } catch (error) {
    console.error('‚ùå SafeLink: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SafeLink
const safeLinkCore = new SafeLinkCore();