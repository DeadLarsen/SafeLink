// warning-phrase.js - JavaScript –¥–ª—è warning-phrase.html
// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ñ—Ä–∞–∑–∞—Ö

class PhraseWarningPage {
    constructor() {
        this.blockedPhrase = '';
        this.fullQuery = '';
        this.originalSearch = '';
        this.searchEngine = '';
        this.category = 'general';
        this.countdown = 10;
        this.countdownInterval = null;
        
        this.debugLog('üöÄ Phrase warning script starting...');
        this.init();
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    debugLog(message) {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = `[${timestamp}] ${message}`;
        console.log(`[SafeLink Phrases] ${message}`);

        const debugDiv = document.getElementById('phraseDebug');
        if (debugDiv) {
            debugDiv.innerHTML += `${logEntry}<br>`;
            debugDiv.scrollTop = debugDiv.scrollHeight;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        this.debugLog('üîÑ Starting phrase warning initialization...');
        try {
            this.parseUrlParams();
            this.updateInterface();
            this.loadStats();
            this.setupEventListeners();
            this.debugLog('‚úÖ Phrase warning initialized successfully');
        } catch (error) {
            this.debugLog(`‚ùå Init error: ${error.message}`);
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
    parseUrlParams() {
        this.debugLog('üîç Parsing URL parameters...');
        const urlParams = new URLSearchParams(window.location.search);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ —Å–ø–∏—Å–∫–∞
        this.blockedPhrase = urlParams.get('phrase') || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞';
        try {
            this.blockedPhrase = decodeURIComponent(this.blockedPhrase);
        } catch (e) {
            this.debugLog(`‚ö†Ô∏è Failed to decode phrase: ${e.message}`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.fullQuery = urlParams.get('fullQuery') || '';
        try {
            if (this.fullQuery) {
                this.fullQuery = decodeURIComponent(this.fullQuery);
                this.debugLog(`üîç Full user query: ${this.fullQuery}`);
            }
        } catch (e) {
            this.debugLog(`‚ö†Ô∏è Failed to decode full query: ${e.message}`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π URL
        this.originalSearch = urlParams.get('search') || '';
        if (this.originalSearch) {
            try {
                // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–≤–æ–π–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω)
                let decodedUrl = decodeURIComponent(this.originalSearch);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
                if (decodedUrl.includes('%')) {
                    try {
                        decodedUrl = decodeURIComponent(decodedUrl);
                        this.debugLog('üìù Applied double URL decoding');
                    } catch (e) {
                        this.debugLog('üìù Single URL decoding was sufficient');
                    }
                }
                
                this.originalSearch = decodedUrl;
                this.debugLog(`üîó Decoded original search: ${this.originalSearch}`);
            } catch (error) {
                this.debugLog(`‚ö†Ô∏è URL decoding failed: ${error.message}`);
            }
        }
        
        this.debugLog(`üéØ Blocked phrase: ${this.blockedPhrase}`);
        this.debugLog(`üîó Original search URL: ${this.originalSearch}`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        if (this.originalSearch) {
            try {
                const url = new URL(this.originalSearch);
                this.searchEngine = url.hostname;
                this.debugLog(`üåê Search engine: ${this.searchEngine}`);
            } catch (error) {
                this.debugLog(`‚ö†Ô∏è Error parsing search URL: ${error.message}`);
                this.searchEngine = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è';
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateInterface() {
        this.debugLog('üé® Updating interface...');
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—Ä–∞–∑—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –µ—Å—Ç—å
            const phraseElement = document.getElementById('blockedPhrase');
            if (phraseElement) {
                if (this.fullQuery) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã
                    const displayText = this.highlightBlockedPhrase(this.fullQuery, this.blockedPhrase);
                    phraseElement.innerHTML = displayText;
                } else {
                    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é
                    phraseElement.textContent = this.blockedPhrase;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            const categoryElement = document.getElementById('phraseCategory');
            if (categoryElement) {
                categoryElement.textContent = this.getCategoryDisplayName(this.category);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
            const engineElement = document.getElementById('engineName');
            if (engineElement) {
                engineElement.textContent = this.getSearchEngineDisplayName(this.searchEngine);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            const queryElement = document.getElementById('originalQuery');
            if (queryElement && this.originalSearch) {
                try {
                    const url = new URL(this.originalSearch);
                    const params = url.searchParams;
                    const query = this.extractQueryFromUrl(url);
                    queryElement.textContent = query || '–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–∞–ø—Ä–æ—Å';
                } catch (error) {
                    queryElement.textContent = '–æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞';
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã
            this.updateReasonText();
            
            this.debugLog('‚úÖ Interface updated successfully');
            
        } catch (error) {
            this.debugLog(`‚ùå Interface update error: ${error.message}`);
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ URL
    extractQueryFromUrl(url) {
        const params = url.searchParams;
        const domain = url.hostname.toLowerCase();
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
        const queryParams = {
            'google.com': 'q',
            'google.ru': 'q',
            'yandex.ru': 'text',
            'yandex.com': 'text',
            'bing.com': 'q',
            'mail.ru': 'q',
            'rambler.ru': 'query',
            'yahoo.com': 'p',
            'duckduckgo.com': 'q'
        };
        
        for (const [engine, param] of Object.entries(queryParams)) {
            if (domain.includes(engine)) {
                return params.get(param);
            }
        }
        
        return params.get('q') || params.get('query') || params.get('text');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    getSearchEngineDisplayName(engine) {
        const engines = {
            'google.com': 'Google',
            'google.ru': 'Google –†–æ—Å—Å–∏—è',
            'yandex.ru': '–Ø–Ω–¥–µ–∫—Å',
            'yandex.com': 'Yandex',
            'bing.com': 'Bing',
            'mail.ru': 'Mail.ru',
            'rambler.ru': 'Rambler',
            'yahoo.com': 'Yahoo',
            'duckduckgo.com': 'DuckDuckGo'
        };
        
        return engines[engine] || engine || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getCategoryDisplayName(category) {
        const categories = {
            'books': '–∫–Ω–∏–≥–∏',
            'websites': '—Å–∞–π—Ç—ã',
            'magazines': '–∂—É—Ä–Ω–∞–ª—ã',
            'videos': '–≤–∏–¥–µ–æ',
            'organizations': '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
            'general': '–æ–±—â–∞—è'
        };
        
        return categories[category] || '–æ–±—â–∞—è';
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    updateReasonText() {
        const reasonElement = document.getElementById('reasonText');
        if (!reasonElement) return;
        
        const categoryTexts = {
            'books': '–î–∞–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.',
            'websites': '–î–∞–Ω–Ω—ã–π –≤–µ–±-—Å–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Ä–µ—à–µ–Ω–∏—é —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤.',
            'magazines': '–î–∞–Ω–Ω–æ–µ –∏–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–Ω–æ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º.',
            'videos': '–î–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é.',
            'organizations': '–î–∞–Ω–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–æ–π –∏–ª–∏ —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π.',
            'general': '–î–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.'
        };
        
        reasonElement.textContent = categoryTexts[this.category] || categoryTexts['general'];
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async loadStats() {
        this.debugLog('üìä Loading statistics...');
        try {
            if (typeof chrome !== 'undefined' && chrome.storage) {
                const result = await chrome.storage.local.get(['safelink_phrase_stats']);
                const stats = result.safelink_phrase_stats || { blocked: 0, allowed: 0 };
                
                const countElement = document.getElementById('blockedCount');
                if (countElement) {
                    countElement.textContent = stats.blocked || 0;
                }
                
                this.debugLog(`üìà Loaded phrase stats: ${stats.blocked} blocked`);
            } else {
                this.debugLog('‚ö†Ô∏è Chrome storage not available');
                const countElement = document.getElementById('blockedCount');
                if (countElement) {
                    countElement.textContent = '42';
                }
            }
        } catch (error) {
            this.debugLog(`‚ùå Stats loading error: ${error.message}`);
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        this.debugLog('üîß Setting up event listeners...');
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        const goBackBtn = document.getElementById('goBackBtn');
        if (goBackBtn) {
            goBackBtn.addEventListener('click', (e) => {
                this.debugLog('üëÜ Back button clicked');
                e.preventDefault();
                this.goBack();
            });
            this.debugLog('‚úÖ Back button listener attached');
        }

        // –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
        const modifyBtn = document.getElementById('modifySearchBtn');
        if (modifyBtn) {
            modifyBtn.addEventListener('click', (e) => {
                this.debugLog('üëÜ Modify search button clicked');
                e.preventDefault();
                this.modifySearch();
            });
            this.debugLog('‚úÖ Modify button listener attached');
        }

        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        const continueBtn = document.getElementById('continueBtn');
        if (continueBtn) {
            continueBtn.disabled = false; // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Å—Ä–∞–∑—É
            continueBtn.addEventListener('click', (e) => {
                this.debugLog('üëÜ Continue button clicked');
                e.preventDefault();
                this.continueSearch();
            });
            this.debugLog('‚úÖ Continue button listener attached');
        }

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.debugLog('‚å®Ô∏è Escape key pressed');
                this.goBack();
            }
        });
        this.debugLog('‚å®Ô∏è Keyboard shortcuts set up');
    }

    // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
    goBack() {
        this.debugLog('üîô Executing go back...');
        try {
            this.updateStats('blocked');
            
            if (window.history.length > 1) {
                this.debugLog('üìù Using history.back()');
                window.history.back();
            } else {
                this.debugLog('üìù No history, redirecting to safe page');
                window.location.href = 'https://www.google.com';
            }
        } catch (error) {
            this.debugLog(`‚ùå Go back error: ${error.message}`);
            window.location.href = 'https://www.google.com';
        }
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    modifySearch() {
        this.debugLog('‚úèÔ∏è Modifying search query...');
        
        const newQuery = prompt(
            `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ "${this.blockedPhrase}":`,
            ''
        );
        
        if (newQuery && newQuery.trim()) {
            this.debugLog(`üìù New query: ${newQuery}`);
            
            try {
                // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
                let searchUrl = 'https://www.google.com/search?q=' + encodeURIComponent(newQuery.trim());
                
                // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—É –∂–µ –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
                if (this.originalSearch) {
                    const originalUrl = new URL(this.originalSearch);
                    const domain = originalUrl.hostname;
                    
                    if (domain.includes('yandex')) {
                        searchUrl = `https://yandex.ru/search/?text=${encodeURIComponent(newQuery.trim())}`;
                    } else if (domain.includes('mail.ru')) {
                        searchUrl = `https://go.mail.ru/search?q=${encodeURIComponent(newQuery.trim())}`;
                    } else if (domain.includes('bing')) {
                        searchUrl = `https://www.bing.com/search?q=${encodeURIComponent(newQuery.trim())}`;
                    }
                }
                
                this.debugLog(`üîó Redirecting to: ${searchUrl}`);
                window.location.href = searchUrl;
                
            } catch (error) {
                this.debugLog(`‚ùå Modify search error: ${error.message}`);
                // Fallback to Google
                window.location.href = 'https://www.google.com/search?q=' + encodeURIComponent(newQuery.trim());
            }
        } else {
            this.debugLog('üö´ User cancelled or entered empty query');
        }
    }

    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    async continueSearch() {
        this.debugLog('üöÄ Continuing original search...');
        
        try {
            this.updateStats('ignored');
            
            if (this.originalSearch) {
                this.debugLog(`üîó Original search URL: ${this.originalSearch}`);
                
                // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –µ—Å–ª–∏ –æ–Ω –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω
                let targetUrl = this.originalSearch;
                try {
                    targetUrl = decodeURIComponent(this.originalSearch);
                    this.debugLog(`üîó Decoded URL: ${targetUrl}`);
                } catch (e) {
                    this.debugLog(`‚ö†Ô∏è URL decode failed, using original: ${e.message}`);
                }
                
                this.debugLog(`üéØ Final target URL: ${targetUrl}`);
                
                // –°—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º background script - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥
                this.debugLog('üì§ Using background script for reliable redirect...');
                this.fallbackRedirect(targetUrl);
            } else {
                this.debugLog('‚ùå No original search URL available');
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
            }
            
        } catch (error) {
            this.debugLog(`‚ùå Continue search error: ${error.message}`);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –ø–æ–∏—Å–∫—É');
        }
    }

    // Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    fallbackRedirect(url) {
        this.debugLog(`üîÑ Primary redirect method to: ${url}`);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ background script (–û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î)
        try {
            this.debugLog('üì§ Sending message to background script...');
            if (chrome && chrome.runtime) {
                chrome.runtime.sendMessage({
                    action: 'openUrl',
                    url: url
                }, (response) => {
                    if (chrome.runtime.lastError) {
                        this.debugLog(`‚ùå Background message failed: ${chrome.runtime.lastError.message}`);
                        this.tryDirectRedirect(url);
                                         } else if (response && response.success && response.redirect) {
                        this.debugLog(`‚úÖ Background script added URL to ignored list successfully`);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º
                        const notification = document.createElement('div');
                        notification.style.cssText = `
                            position: fixed; top: 20px; left: 50%; transform: translateX(-50%);
                            background: #4CAF50; color: white; padding: 15px 25px;
                            border-radius: 8px; z-index: 10000; font-weight: bold;
                            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                        `;
                        notification.textContent = '‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...';
                        document.body.appendChild(notification);
                        
                        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç—É –∂–µ –≤–∫–ª–∞–¥–∫—É –Ω–∞ Google
                        this.debugLog('üîÑ Warning: Redirecting this tab to Google');
                        setTimeout(() => {
                            window.location.href = url;
                        }, 500);
                        
                        return; // –í–ê–ñ–ù–û: –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    } else {
                        this.debugLog('‚ùå Background script response indicates failure');
                        this.tryDirectRedirect(url);
                    }
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ background script –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
                setTimeout(() => {
                    this.debugLog('‚è∞ Background script timeout, redirecting same tab');
                    // –ü—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–æ–π –∂–µ –≤–∫–ª–∞–¥–∫–µ
                    window.location.href = url;
                }, 2000);
                
                return; // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç background script
            }
        } catch (error) {
            this.debugLog(`‚ùå Message to background failed: ${error.message}`);
        }
        
        // –ï—Å–ª–∏ background script –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—ã–µ –º–µ—Ç–æ–¥—ã
        this.tryDirectRedirect(url);
    }
    
    // –ü—Ä—è–º—ã–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ—Ö–æ–¥–∞ (–¢–û–õ–¨–ö–û –í –¢–û–ô –ñ–ï –í–ö–õ–ê–î–ö–ï)
    tryDirectRedirect(url) {
        this.debugLog(`üîÑ Trying direct redirect to: ${url} (same tab only)`);
        
        try {
            // –ú–µ—Ç–æ–¥ 1: –ò–∑–º–µ–Ω–µ–Ω–∏–µ location —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
            this.debugLog('üîÑ Method 1: window.location...');
            window.location.href = url;
            return;
        } catch (e) {
            this.debugLog(`‚ùå window.location failed: ${e.message}`);
        }
        
        try {
            // –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ top window
            this.debugLog('üîÑ Method 2: window.top.location...');
            if (window.top && window.top !== window) {
                window.top.location.href = url;
                return;
            }
        } catch (e) {
            this.debugLog(`‚ùå window.top.location failed: ${e.message}`);
        }
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - —Ä—É—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (–ù–ï –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ –í–ö–õ–ê–î–ö–£!)
        this.debugLog('üö® All redirect methods failed, showing manual copy dialog');
        const copyText = `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è.\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É:\n\n${url}`;
        
        if (navigator.clipboard) {
            navigator.clipboard.writeText(url).then(() => {
                alert(copyText + '\n\n‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            }).catch(() => {
                alert(copyText);
            });
        } else {
            alert(copyText);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async updateStats(type) {
        try {
            if (typeof chrome !== 'undefined' && chrome.storage) {
                const result = await chrome.storage.local.get(['safelink_phrase_stats']);
                const stats = result.safelink_phrase_stats || { blocked: 0, ignored: 0 };
                stats[type] = (stats[type] || 0) + 1;
                await chrome.storage.local.set({ safelink_phrase_stats: stats });
                this.debugLog(`üìä Phrase stats updated: ${type}`);
            }
        } catch (error) {
            this.debugLog(`‚ö†Ô∏è Stats update failed: ${error.message}`);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã –≤ —Ç–µ–∫—Å—Ç–µ
    highlightBlockedPhrase(text, phrase) {
        if (!phrase) return text;
        const escapedPhrase = phrase.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        const regex = new RegExp(`(${escapedPhrase})`, 'gi');
        return text.replace(regex, '<span class="highlighted-phrase">$1</span>');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('üåü DOM loaded, creating PhraseWarningPage');
        window.phraseWarningPage = new PhraseWarningPage();
    });
} else {
    console.log('üåü DOM already ready, creating PhraseWarningPage');
    window.phraseWarningPage = new PhraseWarningPage();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error(`üí• JavaScript error: ${event.error.message}`);
}); 