// SafeLink Options Script
class SafeLinkOptions {
  constructor() {
    this.settings = {};
    this.blockedSites = [];
    this.allowedSites = [];
    this.stats = {};
    this.init();
  }

  async init() {
    await this.loadData();
    this.setupNavigation();
    this.setupEventListeners();
    this.setupStorageListener();
    this.updateUI();
  }

  async loadData() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settingsResult = await chrome.storage.local.get(['safelink_settings']);
      this.settings = settingsResult.safelink_settings || {
        blockMode: 'warn',
        proVersion: false,
        markLinks: true,
        showNotifications: true,
        autoSync: true,
        autoUpdatePhrases: false
      };

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ —Å–∞–π—Ç–æ–≤
      const listsResult = await chrome.storage.local.get(['custom_blocked_sites', 'custom_allowed_sites']);
      this.blockedSites = listsResult.custom_blocked_sites || [];
      this.allowedSites = listsResult.custom_allowed_sites || [];

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsResult = await chrome.storage.local.get(['safelink_stats']);
      this.stats = statsResult.safelink_stats || {
        blocked: 0,
        allowed: 0,
        installDate: Date.now()
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  setupNavigation() {
    const navButtons = document.querySelectorAll('.nav-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    navButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const targetTab = btn.getAttribute('data-tab');
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        navButtons.forEach(b => b.classList.remove('active'));
        tabContents.forEach(t => t.classList.remove('active'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        btn.classList.add('active');
        document.getElementById(targetTab).classList.add('active');
      });
    });
  }

  setupEventListeners() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã
    this.setupProtectionSettings();
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏
    this.setupListManagement();
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑–∞–º–∏
    this.setupPhrasesManagement();
    
    // PRO —Ñ—É–Ω–∫—Ü–∏–∏
    this.setupProFeatures();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.setupStatistics();
  }

  setupProtectionSettings() {
    // –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    const blockModeRadios = document.querySelectorAll('input[name="blockMode"]');
    blockModeRadios.forEach(radio => {
      radio.addEventListener('change', async () => {
        if (radio.checked) {
          this.settings.blockMode = radio.value;
          await this.saveSettings();
          this.showNotification('–†–µ–∂–∏–º –∑–∞—â–∏—Ç—ã –∏–∑–º–µ–Ω–µ–Ω', 'success');
        }
      });
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const toggles = [
      { id: 'markLinks', setting: 'markLinks' },
      { id: 'showNotifications', setting: 'showNotifications' },
      { id: 'autoSync', setting: 'autoSync' }
    ];
    toggles.forEach(({ id, setting }) => {
      const toggle = document.getElementById(id);
      if (toggle) {
        toggle.addEventListener('change', async () => {
          this.settings[setting] = toggle.checked;
          await this.saveSettings();
          this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        });
      }
    });
  }

  setupListManagement() {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞
    document.getElementById('addBlockedSite').addEventListener('click', () => {
      this.addSiteToList('blocked');
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞
    document.getElementById('addAllowedSite').addEventListener('click', () => {
      this.addSiteToList('allowed');
    });

    // –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–æ–≤
    document.getElementById('exportLists').addEventListener('click', () => {
      this.exportLists();
    });

    document.getElementById('importLists').addEventListener('click', () => {
      document.getElementById('importFile').click();
    });

    document.getElementById('importFile').addEventListener('change', (e) => {
      this.importLists(e.target.files[0]);
    });

    // –°–±—Ä–æ—Å —Å–ø–∏—Å–∫–æ–≤
    document.getElementById('resetLists').addEventListener('click', () => {
      this.resetLists();
    });

    // Enter –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–≤
    document.getElementById('newBlockedSite').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        this.addSiteToList('blocked');
      }
    });

    document.getElementById('newAllowedSite').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        this.addSiteToList('allowed');
      }
    });
  }

  setupProFeatures() {
    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è PRO
    document.getElementById('activatePro').addEventListener('click', () => {
      this.activateProVersion();
    });

    // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è PRO
    const deactivateBtn = document.getElementById('deactivatePro');
    if (deactivateBtn) {
      deactivateBtn.addEventListener('click', () => {
        this.deactivateProVersion();
      });
    }

    // –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    const manualSyncBtn = document.getElementById('manualSync');
    if (manualSyncBtn) {
      manualSyncBtn.addEventListener('click', () => {
        this.manualSync();
      });
    }
  }

  setupStatistics() {
    // –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    document.getElementById('exportStats').addEventListener('click', () => {
      this.exportStatistics();
    });

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    document.getElementById('clearStats').addEventListener('click', () => {
      this.clearStatistics();
    });
  }

  setupPhrasesManagement() {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∞–∑
    this.phrasesListVisible = false;
    this.currentPage = 1;
    this.phrasesPerPage = 50;
    this.currentSearch = '';
    this.currentSort = 'alphabetical';
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∞–∑
    document.getElementById('togglePhrasesList').addEventListener('click', () => {
      this.togglePhrasesList();
    });
    
    // –ü–æ–∏—Å–∫ —Ñ—Ä–∞–∑
    document.getElementById('phrasesSearch').addEventListener('input', (e) => {
      this.currentSearch = e.target.value;
      this.currentPage = 1;
      this.debounceSearch();
    });
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ—Ä–∞–∑
    document.getElementById('phrasesSortBy').addEventListener('change', (e) => {
      this.currentSort = e.target.value;
      this.currentPage = 1;
      this.loadPhrasesList();
    });
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    document.getElementById('phrasesPrev').addEventListener('click', () => {
      if (this.currentPage > 1) {
        this.currentPage--;
        this.loadPhrasesList();
      }
    });
    
    document.getElementById('phrasesNext').addEventListener('click', () => {
      this.currentPage++;
      this.loadPhrasesList();
    });
    
    // Debounce –¥–ª—è –ø–æ–∏—Å–∫–∞
    this.searchTimeout = null;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑ —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    document.getElementById('updatePhrasesNew').addEventListener('click', async () => {
      const button = document.getElementById('updatePhrasesNew');
      const originalText = button.textContent;
      
      try {
        button.textContent = 'üîÑ –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
        button.disabled = true;
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—Ä–∞–∑—ã...');
        await chrome.storage.local.remove(['safelink_minjust_phrases', 'safelink_minjust_timestamp']);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ø–æ–∫–∞–∂–µ—Ç 0 —Ñ—Ä–∞–∑)
        await this.updatePhrasesInfo();
        
        button.textContent = 'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ñ—Ä–∞–∑...';
        
        // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const response = await chrome.runtime.sendMessage({
          action: 'updatePhrasesFromMinJust'
        });
        
        if (response && response.success) {
          this.showNotification(`‚úÖ –£—Å–ø–µ—à–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.count} —Ñ—Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –≤ –∫–∞–≤—ã—á–∫–∞—Ö)`, 'success');
          await this.updatePhrasesInfo();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
          if (this.phrasesListVisible) {
            this.currentPage = 1;
            this.loadPhrasesList();
          }
        } else {
          this.showNotification(`‚ùå –û—à–∏–±–∫–∞: ${response?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑:', error);
        this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑', 'error');
      } finally {
        button.textContent = originalText;
        button.disabled = false;
      }
    });
    
    // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ñ—Ä–∞–∑
    document.getElementById('clearPhrasesCache').addEventListener('click', async () => {
      if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ñ—Ä–∞–∑? –≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.')) {
        try {
          await chrome.storage.local.remove(['safelink_minjust_phrases', 'safelink_minjust_timestamp']);
          this.showNotification('üóëÔ∏è –ö—ç—à —Ñ—Ä–∞–∑ –æ—á–∏—â–µ–Ω', 'success');
          await this.updatePhrasesInfo();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
          this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞', 'error');
        }
      }
    });
    
    // –¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    /*
    document.getElementById('testEncoding').addEventListener('click', async () => {
      const button = document.getElementById('testEncoding');
      const originalText = button.textContent;
      
      try {
        button.textContent = 'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...';
        button.disabled = true;
        
        const response = await chrome.runtime.sendMessage({
          action: 'testCP1251Decoding'
        });
        
        if (response && response.success) {
          const message = `‚úÖ –¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n\n` +
            `üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${response.sizeKB} KB\n` +
            `üîç –ò—Å–∫–∞–ª–∏ —Ñ—Ä–∞–∑—É: "${response.testPhrase}"\n` +
            `${response.found ? '‚úÖ' : '‚ùå'} –ù–∞–π–¥–µ–Ω–æ: ${response.found ? '–î–∞' : '–ù–µ—Ç'}\n\n` +
            `üìù –û–±—Ä–∞–∑–µ—Ü –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n"${response.sample}"`;
          
          alert(message);
          
          if (response.found) {
            this.showNotification('üéâ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –§—Ä–∞–∑–∞ –Ω–∞–π–¥–µ–Ω–∞.', 'success');
          } else {
            this.showNotification('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'warning');
          }
        } else {
          this.showNotification(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${response?.error}`, 'error');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', error);
        this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏', 'error');
      } finally {
        button.textContent = originalText;
        button.disabled = false;
      }
    });
    */
    
    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ—Ä–∞–∑
    document.getElementById('clearAllPhrases').addEventListener('click', async () => {
      if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        const button = document.getElementById('clearAllPhrases');
        const originalText = button.textContent;
        
        try {
          button.textContent = 'üóëÔ∏è –û—á–∏—Å—Ç–∫–∞...';
          button.disabled = true;
          
          // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ—Ä–∞–∑–∞–º–∏
          await chrome.storage.local.remove([
            'safelink_minjust_phrases',
            'safelink_minjust_timestamp'
          ]);
          
          // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Ñ—Ä–∞–∑—ã –≤ background script
          const response = await chrome.runtime.sendMessage({
            action: 'clearAllPhrases'
          });
          
          if (response && response.success) {
            this.showNotification('üóëÔ∏è –í—Å–µ —Ñ—Ä–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', 'success');
          } else {
            this.showNotification('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã, –Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ background script', 'warning');
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          await this.updatePhrasesInfo();
          
          // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
          if (this.phrasesListVisible) {
            this.loadPhrasesList();
          }
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ—Ä–∞–∑:', error);
          this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ—Ä–∞–∑', 'error');
        } finally {
          button.textContent = originalText;
          button.disabled = false;
        }
      }
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—Ä–∞–∑–∞—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.updatePhrasesInfo();
  }

  async updatePhrasesInfo() {
    try {
      const response = await chrome.runtime.sendMessage({
        action: 'getPhrasesInfo'
      });
      
      if (response && response.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–∑
        document.getElementById('phrasesCount').textContent = response.phrasesCount || 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const lastUpdateElement = document.getElementById('lastUpdate');
        const dataAgeElement = document.getElementById('dataAge');
        
        if (response.lastUpdate && response.lastUpdate > 0) {
          const lastUpdateDate = new Date(response.lastUpdate);
          lastUpdateElement.textContent = lastUpdateDate.toLocaleString('ru-RU');
          
          if (response.ageHours !== undefined) {
            if (response.ageHours < 1) {
              dataAgeElement.textContent = '–ú–µ–Ω–µ–µ —á–∞—Å–∞';
            } else if (response.ageHours < 24) {
              dataAgeElement.textContent = `${response.ageHours} —á`;
            } else {
              const days = Math.floor(response.ageHours / 24);
              dataAgeElement.textContent = `${days} –¥–Ω`;
            }
          } else {
            dataAgeElement.textContent = '-';
          }
        } else {
          lastUpdateElement.textContent = '–ù–∏–∫–æ–≥–¥–∞';
          dataAgeElement.textContent = '-';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const autoUpdateToggle = document.getElementById('autoUpdatePhrases');
        if (autoUpdateToggle) {
          autoUpdateToggle.checked = response.autoUpdate || false;
        }
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—Ä–∞–∑–∞—Ö:', response);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—Ä–∞–∑–∞—Ö:', error);
    }
  }

  setupStorageListener() {
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ chrome.storage.local
    chrome.storage.onChanged.addListener((changes, namespace) => {
      if (namespace === 'local') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Å–ø–∏—Å–∫–∏ —Å–∞–π—Ç–æ–≤
        if (changes.custom_blocked_sites || changes.custom_allowed_sites) {
          console.log('üìã Options: Storage changed, updating site lists');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã
          if (changes.custom_blocked_sites) {
            this.blockedSites = changes.custom_blocked_sites.newValue || [];
            console.log('üìã Updated blocked sites:', this.blockedSites);
          }
          
          if (changes.custom_allowed_sites) {
            this.allowedSites = changes.custom_allowed_sites.newValue || [];
            console.log('üìã Updated allowed sites:', this.allowedSites);
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º UI
          this.updateSiteLists();
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
          if (changes.custom_blocked_sites && changes.custom_allowed_sites) {
            // –û–±–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –Ω–∞–π–¥–µ–º —á—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ
            const oldAllowed = changes.custom_allowed_sites.oldValue || [];
            const newAllowed = changes.custom_allowed_sites.newValue || [];
            const addedSites = newAllowed.filter(site => !oldAllowed.includes(site));
            
            if (addedSites.length > 0) {
              this.showNotification(`–°–∞–π—Ç ${addedSites[0]} —Ä–∞–∑—Ä–µ—à–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö`, 'success');
            } else {
              this.showNotification('–°–ø–∏—Å–∫–∏ —Å–∞–π—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'info');
            }
          } else if (changes.custom_allowed_sites) {
            const oldValue = changes.custom_allowed_sites.oldValue || [];
            const newValue = changes.custom_allowed_sites.newValue || [];
            const addedSites = newValue.filter(site => !oldValue.includes(site));
            
            if (addedSites.length > 0) {
              this.showNotification(`–°–∞–π—Ç ${addedSites[0]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ`, 'success');
            } else {
              this.showNotification('–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω', 'info');
            }
          } else if (changes.custom_blocked_sites) {
            this.showNotification('–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω', 'info');
          }
        }
      }
    });
  }

  async updateUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã
    this.updateProtectionUI();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —Å–∞–π—Ç–æ–≤
    this.updateSiteLists();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º PRO —Å–µ–∫—Ü–∏—é
    this.updateProSection();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.updateStatistics();
  }

  updateProtectionUI() {
    // –†–µ–∂–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    const blockModeRadio = document.querySelector(`input[name="blockMode"][value="${this.settings.blockMode}"]`);
    if (blockModeRadio) {
      blockModeRadio.checked = true;
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
    const toggles = [
      { id: 'markLinks', setting: 'markLinks' },
      { id: 'showNotifications', setting: 'showNotifications' },
      { id: 'autoSync', setting: 'autoSync' }
    ];
    toggles.forEach(toggle => {
      const element = document.getElementById(toggle.id);
      if (element) {
        element.checked = this.settings[toggle.setting] || false;
      }
    });
  }

  updateSiteLists() {
    // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã
    const blockedList = document.getElementById('blockedSitesList');
    blockedList.innerHTML = '';
    
    this.blockedSites.forEach((site, index) => {
      const li = this.createSiteListItem(site, 'blocked', index);
      blockedList.appendChild(li);
    });

    // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã
    const allowedList = document.getElementById('allowedSitesList');
    allowedList.innerHTML = '';
    
    this.allowedSites.forEach((site, index) => {
      const li = this.createSiteListItem(site, 'allowed', index);
      allowedList.appendChild(li);
    });
  }

  createSiteListItem(site, type, index) {
    const li = document.createElement('li');
    li.innerHTML = `
      <div class="site-info">
        <div class="site-domain">${site}</div>
        <div class="site-category">${type === 'blocked' ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '–†–∞–∑—Ä–µ—à–µ–Ω'}</div>
      </div>
      <div class="site-actions">
        <button class="action-btn delete" data-type="${type}" data-index="${index}">
          –£–¥–∞–ª–∏—Ç—å
        </button>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    const deleteBtn = li.querySelector('.action-btn.delete');
    deleteBtn.addEventListener('click', () => {
      this.removeSiteFromList(type, index);
    });
    
    return li;
  }

  updateProSection() {
    const proStatus = document.getElementById('proStatus');
    const proSettings = document.getElementById('proSettings');
    const activationForm = document.getElementById('activationForm');
    const deactivationForm = document.getElementById('deactivationForm');

    if (this.settings.proVersion) {
      proStatus.innerHTML = `
        <span class="status-indicator active"></span>
        <span class="status-text">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</span>
      `;
      proSettings.style.display = 'block';
      activationForm.style.display = 'none';
      deactivationForm.style.display = 'block';

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      this.updateSyncInfo();
    } else {
      proStatus.innerHTML = `
        <span class="status-indicator"></span>
        <span class="status-text">–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</span>
      `;
      proSettings.style.display = 'none';
      activationForm.style.display = 'block';
      deactivationForm.style.display = 'none';
    }
  }

  updateSyncInfo() {
    const lastSyncElement = document.getElementById('lastSync');
    if (this.settings.lastSync) {
      const date = new Date(this.settings.lastSync);
      const now = new Date();
      const diffHours = Math.floor((now - date) / (1000 * 60 * 60));
      
      if (diffHours < 1) {
        lastSyncElement.textContent = '–¢–æ–ª—å–∫–æ —á—Ç–æ';
      } else if (diffHours < 24) {
        lastSyncElement.textContent = `${diffHours} —á. –Ω–∞–∑–∞–¥`;
      } else {
        const diffDays = Math.floor(diffHours / 24);
        lastSyncElement.textContent = `${diffDays} –¥. –Ω–∞–∑–∞–¥`;
      }
    } else {
      lastSyncElement.textContent = '–ù–∏–∫–æ–≥–¥–∞';
    }
  }

  updateStatistics() {
    document.getElementById('totalBlocked').textContent = this.stats.blocked || 0;
    document.getElementById('totalAllowed').textContent = this.stats.allowed || 0;
    
    // –î–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const installDate = new Date(this.stats.installDate || Date.now());
    const now = new Date();
    const daysActive = Math.floor((now - installDate) / (1000 * 60 * 60 * 24));
    document.getElementById('daysActive').textContent = Math.max(1, daysActive);

    // –ò—Å—Ç–æ—Ä–∏—è –∑–∞—â–∏—Ç—ã
    this.updateProtectionHistory();
  }

  updateProtectionHistory() {
    const historyContainer = document.getElementById('protectionHistory');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const mockHistory = [
      { date: new Date(), action: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω malware-site.com', type: 'blocked' },
      { date: new Date(Date.now() - 3600000), action: '–†–∞–∑—Ä–µ—à–µ–Ω example.com', type: 'allowed' },
      { date: new Date(Date.now() - 7200000), action: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω phishing-bank.net', type: 'blocked' }
    ];

    historyContainer.innerHTML = mockHistory.map(item => `
      <div class="history-item" style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #e9ecef;">
        <span>${item.action}</span>
        <span style="color: #666; font-size: 12px;">${item.date.toLocaleTimeString()}</span>
      </div>
    `).join('');
  }

  async addSiteToList(type) {
    const inputId = type === 'blocked' ? 'newBlockedSite' : 'newAllowedSite';
    const input = document.getElementById(inputId);
    const domain = input.value.trim().toLowerCase();

    if (!domain) {
      this.showNotification('–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω', 'error');
      return;
    }

    if (!this.isValidDomain(domain)) {
      this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞', 'error');
      return;
    }

    const list = type === 'blocked' ? this.blockedSites : this.allowedSites;
    
    if (list.includes(domain)) {
      this.showNotification('–î–æ–º–µ–Ω —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ', 'warning');
      return;
    }

    list.push(domain);
    await this.saveLists();
    this.updateSiteLists();
    input.value = '';
    
    this.showNotification(`–î–æ–º–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ ${type === 'blocked' ? '—á–µ—Ä–Ω—ã–π' : '–±–µ–ª—ã–π'} —Å–ø–∏—Å–æ–∫`, 'success');
  }

  async removeSiteFromList(type, index) {
    const list = type === 'blocked' ? this.blockedSites : this.allowedSites;
    const domain = list[index];
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å ${domain} –∏–∑ —Å–ø–∏—Å–∫–∞?`)) {
      list.splice(index, 1);
      await this.saveLists();
      this.updateSiteLists();
      this.showNotification('–î–æ–º–µ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞', 'success');
    }
  }

  isValidDomain(domain) {
    const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$/;
    return domainRegex.test(domain);
  }

  exportLists() {
    const data = {
      blocked: this.blockedSites,
      allowed: this.allowedSites,
      exportDate: new Date().toISOString(),
      version: '1.0.0'
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `safelink-lists-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    
    URL.revokeObjectURL(url);
    this.showNotification('–°–ø–∏—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
  }

  async importLists(file) {
    if (!file) return;

    try {
      const text = await file.text();
      const data = JSON.parse(text);

      if (data.blocked && Array.isArray(data.blocked)) {
        this.blockedSites = [...new Set([...this.blockedSites, ...data.blocked])];
      }

      if (data.allowed && Array.isArray(data.allowed)) {
        this.allowedSites = [...new Set([...this.allowedSites, ...data.allowed])];
      }

      await this.saveLists();
      this.updateSiteLists();
      this.showNotification('–°–ø–∏—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞', 'error');
    }
  }

  async resetLists() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      this.blockedSites = [];
      this.allowedSites = [];
      await this.saveLists();
      this.updateSiteLists();
      this.showNotification('–°–ø–∏—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
    }
  }

  async activateProVersion() {
    const licenseKey = document.getElementById('licenseKey').value.trim();
    
    if (!licenseKey) {
      this.showNotification('–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á', 'error');
      return;
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏—Ü–µ–Ω–∑–∏–∏
    if (licenseKey === 'SAFELINK-PRO-2024' || licenseKey.startsWith('SL-')) {
      this.settings.proVersion = true;
      this.settings.licenseKey = licenseKey;
      await this.saveSettings();
      this.updateProSection();
      this.showNotification('PRO –≤–µ—Ä—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
    } else {
      this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á', 'error');
    }
  }

  async deactivateProVersion() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å PRO –≤–µ—Ä—Å–∏—é?')) {
      this.settings.proVersion = false;
      delete this.settings.licenseKey;
      await this.saveSettings();
      this.updateProSection();
      this.showNotification('PRO –≤–µ—Ä—Å–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞', 'warning');
    }
  }

  async manualSync() {
    if (!this.settings.proVersion) return;

    const button = document.getElementById('manualSync');
    const originalText = button.textContent;
    button.textContent = 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...';
    button.disabled = true;

    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      this.settings.lastSync = Date.now();
      await this.saveSettings();
      this.updateSyncInfo();
      
      this.showNotification('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
    } catch (error) {
      this.showNotification('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 'error');
    } finally {
      button.textContent = originalText;
      button.disabled = false;
    }
  }

  exportStatistics() {
    const data = {
      stats: this.stats,
      settings: this.settings,
      exportDate: new Date().toISOString(),
      version: '1.0.0'
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `safelink-stats-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    
    URL.revokeObjectURL(url);
    this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', 'success');
  }

  async clearStatistics() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?')) {
      this.stats = {
        blocked: 0,
        allowed: 0,
        installDate: Date.now()
      };
      await chrome.storage.local.set({ safelink_stats: this.stats });
      this.updateStatistics();
      this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞', 'success');
    }
  }

  async saveSettings() {
    await chrome.storage.local.set({ safelink_settings: this.settings });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º background script –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    chrome.runtime.sendMessage({
      action: 'updateSettings',
      settings: this.settings
    });
  }

  async saveLists() {
    await chrome.storage.local.set({
      custom_blocked_sites: this.blockedSites,
      custom_allowed_sites: this.allowedSites
    });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º background script –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤
    try {
      const response = await chrome.runtime.sendMessage({
        action: 'reloadSiteLists'
      });
      console.log('üîÑ Background script —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤:', response);
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å background script:', error);
    }
  }

  showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type === 'success' ? '#28a745' : type === 'warning' ? '#ffc107' : type === 'error' ? '#dc3545' : '#17a2b8'};
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      font-size: 14px;
      z-index: 10000;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      animation: slideIn 0.3s ease;
    `;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.style.animation = 'slideOut 0.3s ease';
      setTimeout(() => {
        notification.remove();
      }, 300);
    }, 3000);
  }

  togglePhrasesList() {
    const container = document.getElementById('phrasesListContainer');
    const button = document.getElementById('togglePhrasesList');
    
    this.phrasesListVisible = !this.phrasesListVisible;
    
    if (this.phrasesListVisible) {
      container.style.display = 'block';
      button.textContent = 'üìã –°–∫—Ä—ã—Ç—å —Ñ—Ä–∞–∑—ã';
      this.loadPhrasesList();
    } else {
      container.style.display = 'none';
      button.textContent = 'üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ñ—Ä–∞–∑—ã';
    }
  }

  debounceSearch() {
    clearTimeout(this.searchTimeout);
    this.searchTimeout = setTimeout(() => {
      this.loadPhrasesList();
    }, 300);
  }

  async loadPhrasesList() {
    const phrasesList = document.getElementById('phrasesList');
    const phrasesShown = document.getElementById('phrasesShown');
    const phrasesTotal = document.getElementById('phrasesTotal');
    const currentPageEl = document.getElementById('currentPage');
    const totalPagesEl = document.getElementById('totalPages');
    const prevBtn = document.getElementById('phrasesPrev');
    const nextBtn = document.getElementById('phrasesNext');
    
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      phrasesList.innerHTML = '<div class="phrases-loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑...</div>';
      
      const response = await chrome.runtime.sendMessage({
        action: 'getPhrasesList',
        page: this.currentPage,
        limit: this.phrasesPerPage,
        search: this.currentSearch,
        sortBy: this.currentSort
      });
      
      if (response && response.success) {
        this.renderPhrasesList(response.phrases);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        phrasesShown.textContent = response.phrases.length;
        phrasesTotal.textContent = response.pagination.total;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        currentPageEl.textContent = response.pagination.page;
        totalPagesEl.textContent = response.pagination.totalPages;
        
        prevBtn.disabled = !response.pagination.hasPrev;
        nextBtn.disabled = !response.pagination.hasNext;
        
        // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–π
        if (response.pagination.page > response.pagination.totalPages && response.pagination.totalPages > 0) {
          this.currentPage = 1;
          this.loadPhrasesList();
          return;
        }
      } else {
        phrasesList.innerHTML = `<div class="phrases-loading">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</div>`;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∞–∑:', error);
      phrasesList.innerHTML = '<div class="phrases-loading">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑</div>';
    }
  }

  renderPhrasesList(phrases) {
    const phrasesList = document.getElementById('phrasesList');
    
    if (phrases.length === 0) {
      phrasesList.innerHTML = '<div class="phrases-loading">–§—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
      return;
    }
    
    const phrasesHtml = phrases.map(phrase => `
      <div class="phrase-item">
        <div class="phrase-text">${this.escapeHtml(phrase.text)}</div>
        <div class="phrase-meta">
          <span class="phrase-length">${phrase.length}</span>
          <span class="phrase-type">${phrase.type}</span>
        </div>
      </div>
    `).join('');
    
    phrasesList.innerHTML = phrasesHtml;
  }

  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
let safeLinkOptions;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', () => {
  safeLinkOptions = new SafeLinkOptions();
});

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
  @keyframes slideIn {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }
  
  @keyframes slideOut {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(100%); opacity: 0; }
  }
`;
document.head.appendChild(style); 