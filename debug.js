// SafeLink Debug Tool Script
const log = document.getElementById('debug-log');

function addLog(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = `[${timestamp}] ${type.toUpperCase()}: ${message}\n`;
    log.textContent += logEntry;
    log.scrollTop = log.scrollHeight;
    console.log(`SafeLink Debug: ${message}`);
}

function clearLog() {
    log.textContent = '';
}

function testExtensionAPI() {
    addLog('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Chrome Extension API...');
    
    if (typeof chrome === 'undefined') {
        addLog('‚ùå Chrome API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }
    
    if (!chrome.runtime) {
        addLog('‚ùå chrome.runtime –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }
    
    if (!chrome.runtime.id) {
        addLog('‚ùå chrome.runtime.id –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }
    
    addLog(`‚úÖ Chrome API –¥–æ—Å—Ç—É–ø–µ–Ω, ID: ${chrome.runtime.id}`, 'success');
}

function testBackgroundConnection() {
    addLog('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å Background Script...');
    
    if (!chrome || !chrome.runtime || !chrome.runtime.sendMessage) {
        addLog('‚ùå chrome.runtime.sendMessage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }
    
    chrome.runtime.sendMessage({
        action: 'getSettings'
    }).then(response => {
        if (response) {
            addLog('‚úÖ –°–≤—è–∑—å —Å Background Script —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
            addLog(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${JSON.stringify(response)}`, 'info');
        } else {
            addLog('‚ö†Ô∏è Background Script –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç', 'warning');
        }
    }).catch(error => {
        addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Background: ${error.message}`, 'error');
    });
}

function testLinkDetection() {
    addLog('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫...');
    
    const testLinks = document.querySelectorAll('.test-link');
    addLog(`–ù–∞–π–¥–µ–Ω–æ ${testLinks.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫`, 'info');
    
    testLinks.forEach((link, index) => {
        const href = link.getAttribute('href');
        const hasWarning = link.querySelector('.safelink-warning');
        const hasStyles = link.style.border.includes('2px solid');
        
        addLog(`–°—Å—ã–ª–∫–∞ ${index + 1} (${href}):`, 'info');
        addLog(`  - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${hasWarning ? '–¥–∞' : '–Ω–µ—Ç'}`, 'info');
        addLog(`  - –°—Ç–∏–ª–∏ SafeLink: ${hasStyles ? '–¥–∞' : '–Ω–µ—Ç'}`, 'info');
    });
}

function testContextInvalidated() {
    addLog('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Context Invalidated –æ—à–∏–±–∫–∏...');
    
    addLog('‚ÑπÔ∏è –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∂–µ—Ç –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è', 'info');
    
    // –≠–º—É–ª–∏—Ä—É–µ–º context invalidated –æ—à–∏–±–∫—É
    const fakeError = new Error('Extension context invalidated.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
    if (fakeError.message.includes('Extension context invalidated')) {
        addLog('‚úÖ –û—à–∏–±–∫–∞ context invalidated –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞', 'success');
        addLog('üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', 'info');
        addLog('  1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (Ctrl+F5)', 'info');
        addLog('  2. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ chrome://extensions/', 'info');
        addLog('  3. –ó–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É', 'info');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        setTimeout(() => {
            addLog('üîÑ –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...', 'info');
            showDemoNotification();
        }, 2000);
    } else {
        addLog('‚ùå –û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞', 'error');
    }
}

function showDemoNotification() {
    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∫–∞–∫ –≤ content.js)
    const notification = document.createElement('div');
    notification.innerHTML = `
      <div style="
        position: fixed;
        top: 10px;
        right: 10px;
        background: #ff6b6b;
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        z-index: 999999;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 14px;
        max-width: 350px;
        cursor: pointer;
      ">
        <div style="font-weight: bold; margin-bottom: 8px;">
          üîÑ SafeLink —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–î–ï–ú–û)
        </div>
        <div style="margin-bottom: 8px;">
          –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã.
        </div>
        <div style="font-size: 12px; opacity: 0.9;">
          –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å ‚Ä¢ –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
        </div>
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    notification.addEventListener('click', () => {
        notification.remove();
        addLog('üìã –î–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'info');
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
            addLog('‚è∞ –î–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥', 'info');
        }
    }, 8000);

    document.body.appendChild(notification);
    addLog('üì¢ –î–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É', 'success');
}

function checkExtensionStatus() {
    const statusDiv = document.getElementById('extension-info');
    const sectionDiv = document.getElementById('extension-status');
    
    if (typeof chrome === 'undefined') {
        statusDiv.innerHTML = '‚ùå Chrome API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        sectionDiv.className = 'debug-section status-error';
        return;
    }
    
    if (!chrome.runtime || !chrome.runtime.id) {
        statusDiv.innerHTML = '‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ';
        sectionDiv.className = 'debug-section status-error';
        return;
    }
    
    statusDiv.innerHTML = `‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (ID: ${chrome.runtime.id})`;
    sectionDiv.className = 'debug-section status-ok';
}

function checkContentScript() {
    const statusDiv = document.getElementById('content-script-info');
    const sectionDiv = document.getElementById('content-script-status');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SafeLink —Å—Ç–∏–ª–µ–π –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    setTimeout(() => {
        const safeLinkElements = document.querySelectorAll('[data-safelink-blocked]');
        const safeLinkWarnings = document.querySelectorAll('.safelink-warning');
        
        if (safeLinkElements.length > 0 || safeLinkWarnings.length > 0) {
            statusDiv.innerHTML = `‚úÖ Content Script —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–π–¥–µ–Ω–æ ${safeLinkElements.length + safeLinkWarnings.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`;
            sectionDiv.className = 'debug-section status-ok';
        } else {
            statusDiv.innerHTML = '‚ö†Ô∏è Content Script –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω';
            sectionDiv.className = 'debug-section status-warning';
        }
    }, 2000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    addLog('SafeLink Debug Tool –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    document.getElementById('testAPIBtn').addEventListener('click', testExtensionAPI);
    document.getElementById('testBackgroundBtn').addEventListener('click', testBackgroundConnection);
    document.getElementById('testLinksBtn').addEventListener('click', testLinkDetection);
    document.getElementById('testContextBtn').addEventListener('click', testContextInvalidated);
    document.getElementById('clearLogBtn').addEventListener('click', clearLog);
    
    checkExtensionStatus();
    checkContentScript();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
        testExtensionAPI();
        testBackgroundConnection();
    }, 1000);
});

// –°–ª—É—à–∞–µ–º –æ—à–∏–±–∫–∏
window.addEventListener('error', (event) => {
    addLog(`–û—à–∏–±–∫–∞ JavaScript: ${event.error.message}`, 'error');
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.log SafeLink
const originalLog = console.log;
const originalError = console.error;
const originalWarn = console.warn;

console.log = function(...args) {
    if (args[0] && args[0].toString().includes('SafeLink')) {
        addLog(args.join(' '), 'info');
    }
    originalLog.apply(console, args);
};

console.error = function(...args) {
    if (args[0] && args[0].toString().includes('SafeLink')) {
        addLog(args.join(' '), 'error');
    }
    originalError.apply(console, args);
};

console.warn = function(...args) {
    if (args[0] && args[0].toString().includes('SafeLink')) {
        addLog(args.join(' '), 'warning');
    }
    originalWarn.apply(console, args);
}; 