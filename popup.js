// SafeLink Popup Script
class SafeLinkPopup {
  constructor() {
    this.currentTab = null;
    this.settings = {};
    this.init();
  }

  async init() {
    await this.getCurrentTab();
    await this.loadSettings();
    this.setupEventListeners();
    this.updateUI();
  }

  async getCurrentTab() {
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    this.currentTab = tab;
  }

  async loadSettings() {
    const response = await chrome.runtime.sendMessage({ action: 'getSettings' });
    this.settings = response;
  }

  setupEventListeners() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã
    document.getElementById('toggleProtection').addEventListener('click', () => {
      this.toggleProtection();
    });

    // –†–∞–∑—Ä–µ—à–∏—Ç—å —Å–∞–π—Ç
    document.getElementById('allowSite').addEventListener('click', () => {
      this.allowCurrentSite();
    });

    // –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç
    document.getElementById('reportSite').addEventListener('click', () => {
      this.reportSite();
    });

    // –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    document.getElementById('openOptions').addEventListener('click', () => {
      chrome.runtime.openOptionsPage();
    });

    // –û—Ç–∫—Ä—ã—Ç—å –ø–æ–º–æ—â—å
    document.getElementById('openHelp').addEventListener('click', () => {
      chrome.tabs.create({ url: 'https://safelink-help.com' });
    });
  }

  async updateUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã
    const protectionStatus = document.getElementById('protectionStatus');
    const toggleBtn = document.getElementById('toggleProtection');
    const toggleText = document.getElementById('toggleText');

    if (this.settings.blockMode === 'disabled') {
      protectionStatus.classList.add('disabled');
      protectionStatus.querySelector('span').textContent = 'üî¥ –í—Å—è –∑–∞—â–∏—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞';
      protectionStatus.querySelector('.status-indicator').classList.add('disabled');
      toggleBtn.classList.add('danger');
      toggleText.textContent = '–í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É';
    } else {
      protectionStatus.classList.remove('disabled');
      protectionStatus.querySelector('span').textContent = 'üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞ (—Å–∞–π—Ç—ã + —Ñ—Ä–∞–∑—ã)';
      protectionStatus.querySelector('.status-indicator').classList.remove('disabled');
      toggleBtn.classList.remove('danger');
      toggleText.textContent = '–û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∞–π—Ç
    await this.checkCurrentSite();

    // PRO —Å–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞
  }

  async checkCurrentSite() {
    if (!this.currentTab || !this.currentTab.url) return;

    const siteStatus = document.getElementById('siteStatus');
    const siteUrl = document.getElementById('siteUrl');
    const allowBtn = document.getElementById('allowSite');

    try {
      const urlObj = new URL(this.currentTab.url);
      const domain = urlObj.hostname;
      
      siteUrl.textContent = domain;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —á–µ—Ä–µ–∑ background script
      const response = await chrome.runtime.sendMessage({
        action: 'checkUrl',
        url: this.currentTab.url
      });

      if (response.blocked && !response.allowed) {
        // –°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        siteStatus.className = 'site-status blocked';
        siteStatus.querySelector('.status-icon').textContent = '‚ö†Ô∏è';
        siteStatus.querySelector('.status-text').textContent = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
        allowBtn.style.display = 'block';
      } else if (response.allowed) {
        // –°–∞–π—Ç –≤ whitelist
        siteStatus.className = 'site-status safe';
        siteStatus.querySelector('.status-icon').textContent = '‚úì';
        siteStatus.querySelector('.status-text').textContent = '–†–∞–∑—Ä–µ—à–µ–Ω';
        allowBtn.style.display = 'none';
      } else {
        // –°–∞–π—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω
        siteStatus.className = 'site-status safe';
        siteStatus.querySelector('.status-icon').textContent = '‚úì';
        siteStatus.querySelector('.status-text').textContent = '–ë–µ–∑–æ–ø–∞—Å–µ–Ω';
        allowBtn.style.display = 'none';
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞:', error);
      siteStatus.className = 'site-status warning';
      siteStatus.querySelector('.status-icon').textContent = '?';
      siteStatus.querySelector('.status-text').textContent = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      siteUrl.textContent = '–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞';
      allowBtn.style.display = 'none';
    }
  }

  async toggleProtection() {
    console.log('üîÑ toggleProtection clicked - current settings:', this.settings);
    
    const isCurrentlyDisabled = this.settings.blockMode === 'disabled';
    const newMode = isCurrentlyDisabled ? 'warn' : 'disabled';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –û–ë–ê —Ä–µ–∂–∏–º–∞ –∑–∞—â–∏—Ç—ã: —Å–∞–π—Ç—ã –ò —Ñ—Ä–∞–∑—ã
    const newSettings = {
      blockMode: newMode,
      phraseBlockMode: newMode,
      markLinks: newMode !== 'disabled' // true –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∑–∞—â–∏—Ç–∞, false –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞
    };
    
    console.log('üì§ Popup sending updateSettings message:', newSettings);
    
    try {
      console.log('üì§ Popup: Sending message to background...');
      const response = await chrome.runtime.sendMessage({
        action: 'updateSettings',
        settings: newSettings
      });
      
      console.log('üì• Popup received response:', response);
      console.log('üì• Response type:', typeof response);
      console.log('üì• Response success:', response?.success);
      
      if (response && response.success) {
        this.settings.blockMode = newMode;
        this.settings.phraseBlockMode = newMode;
        this.settings.markLinks = newMode !== 'disabled';
        this.updateUI();
        console.log('‚úÖ Popup: Settings updated successfully');
      } else {
        console.error('‚ùå Popup: Failed to update settings:', response);
        console.error('‚ùå Chrome runtime error:', chrome.runtime.lastError);
      }
    } catch (error) {
      console.error('‚ùå Popup: Error sending updateSettings:', error);
      console.error('‚ùå Chrome runtime error:', chrome.runtime.lastError);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showNotification(
      newMode === 'disabled' 
        ? 'üî¥ –í—Å—è –∑–∞—â–∏—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Å–∞–π—Ç—ã + —Ñ—Ä–∞–∑—ã)' 
        : 'üü¢ –í—Å—è –∑–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ (—Å–∞–π—Ç—ã + —Ñ—Ä–∞–∑—ã)',
      newMode === 'disabled' ? 'warning' : 'success'
    );
  }

  async allowCurrentSite() {
    if (!this.currentTab || !this.currentTab.url) return;

    await chrome.runtime.sendMessage({
      action: 'allowSite',
      url: this.currentTab.url
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.updateUI();

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    if (this.currentTab.url.includes('chrome-extension://')) {
      const urlParams = new URLSearchParams(this.currentTab.url.split('?')[1]);
      const originalUrl = urlParams.get('url');
      if (originalUrl) {
        chrome.tabs.update(this.currentTab.id, { url: originalUrl });
      }
    }

    this.showNotification('–°–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è', 'success');
  }

  reportSite() {
    if (!this.currentTab || !this.currentTab.url) return;

    try {
      const urlObj = new URL(this.currentTab.url);
      const domain = urlObj.hostname;
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∂–∞–ª–æ–±—ã
      const reportUrl = `https://safelink-report.com?domain=${encodeURIComponent(domain)}`;
      chrome.tabs.create({ url: reportUrl });
      
      this.showNotification('–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!', 'success');
    } catch (error) {
      this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É', 'error');
    }
  }

  updateProSection() {
    const syncStatus = document.getElementById('syncStatus');
    const lastSync = document.getElementById('lastSync');

    if (this.settings.autoSync) {
      syncStatus.textContent = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –∞–∫—Ç–∏–≤–Ω–∞';
    } else {
      syncStatus.textContent = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—Ç–∫–ª—é—á–µ–Ω–∞';
    }

    if (this.settings.lastSync) {
      const date = new Date(this.settings.lastSync);
      const now = new Date();
      const diffHours = Math.floor((now - date) / (1000 * 60 * 60));
      
      if (diffHours < 1) {
        lastSync.textContent = '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —á—Ç–æ';
      } else if (diffHours < 24) {
        lastSync.textContent = `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${diffHours} —á. –Ω–∞–∑–∞–¥`;
      } else {
        const diffDays = Math.floor(diffHours / 24);
        lastSync.textContent = `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${diffDays} –¥. –Ω–∞–∑–∞–¥`;
      }
    } else {
      lastSync.textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å';
    }
  }

  showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 10px;
      left: 50%;
      transform: translateX(-50%);
      background: ${type === 'success' ? '#4caf50' : type === 'warning' ? '#ff9800' : '#f44336'};
      color: white;
      padding: 8px 16px;
      border-radius: 4px;
      font-size: 12px;
      z-index: 1000;
      animation: slideDown 0.3s ease;
    `;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.remove();
    }, 3000);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–æ–Ω–∞—Ç–æ–≤
document.addEventListener('DOMContentLoaded', () => {
  new SafeLinkPopup();
  
  // –ö–Ω–æ–ø–∫–∞ YooKassa
  document.getElementById('donateYookassa').addEventListener('click', () => {
    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É YooKassa
    const yookassaUrl = 'https://yookassa.ru/donate/safelink'; // –ó–∞–≥–ª—É—à–∫–∞
    chrome.tabs.create({ url: yookassaUrl });
  });

  // –ö–Ω–æ–ø–∫–∞ Bitcoin
  document.getElementById('donateBitcoin').addEventListener('click', () => {
    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Bitcoin –∞–¥—Ä–µ—Å
    const bitcoinAddress = 'bc1qexamplebitcoinaddress123456789'; // –ó–∞–≥–ª—É—à–∫–∞
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    navigator.clipboard.writeText(bitcoinAddress).then(() => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notification = document.createElement('div');
      notification.style.cssText = `
        position: fixed;
        top: 10px;
        left: 50%;
        transform: translateX(-50%);
        background: #4CAF50;
        color: white;
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 12px;
        z-index: 1000;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
      `;
      notification.textContent = '‚Çø Bitcoin –∞–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!';
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 2000);
    }).catch(() => {
      // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –≤ –∞–ª–µ—Ä—Ç–µ
      alert(`Bitcoin –∞–¥—Ä–µ—Å:\n${bitcoinAddress}`);
    });
  });
}); 