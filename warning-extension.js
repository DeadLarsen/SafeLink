// warning-extension.js - JavaScript –¥–ª—è warning-extension.html
// –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç CSP –æ—à–∏–±–∫—É "Refused to execute inline script"

class ExtensionWarningPage {
    constructor() {
        this.targetUrl = null;
        this.countdown = 10;
        this.countdownInterval = null;
        
        this.debugLog('üìã ExtensionWarningPage constructor called');
        this.init();
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    debugLog(message) {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = `[${timestamp}] ${message}`;
        console.log(`[SafeLink Extension] ${message}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ Extension Debug Log –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const debugDiv = document.getElementById('extensionDebug');
        if (debugDiv) {
            debugDiv.innerHTML += `${logEntry}<br>`;
            debugDiv.scrollTop = debugDiv.scrollHeight;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    init() {
        this.debugLog('üîÑ Starting initialization...');
        try {
            this.parseUrl();
            this.loadStats();
            this.attachEventListeners();
            this.startCountdown();
            this.debugLog('‚úÖ Initialization completed successfully');
        } catch (error) {
            this.debugLog(`‚ùå Init error: ${error.message}`);
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ URL
    parseUrl() {
        this.debugLog('üîç Parsing URL parameters...');
        const urlParams = new URLSearchParams(window.location.search);
        this.targetUrl = urlParams.get('url');
        
        this.debugLog(`üéØ Target URL: ${this.targetUrl}`);
        
        if (this.targetUrl) {
            document.getElementById('dangerUrl').textContent = this.targetUrl;
            this.analyzeUrl();
            this.debugLog('‚úÖ URL parsed from parameters');
        } else {
            this.targetUrl = 'https://example-dangerous-site.com/test';
            document.getElementById('dangerUrl').textContent = this.targetUrl + ' (fallback URL)';
            this.debugLog('‚ö†Ô∏è No URL parameter, using fallback');
        }
    }

    // –ê–Ω–∞–ª–∏–∑ URL –Ω–∞ —É–≥—Ä–æ–∑—ã
    analyzeUrl() {
        this.debugLog('üîç Analyzing URL for threats...');
        const reasonsList = document.getElementById('reasonsList');
        const reasons = [];

        try {
            const url = new URL(this.targetUrl);
            const domain = url.hostname.toLowerCase();

            if (domain.includes('phishing') || domain.includes('fake')) {
                reasons.push('–î–æ–º–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞');
            }
            
            if (domain.includes('malware') || domain.includes('virus')) {
                reasons.push('–î–æ–º–µ–Ω –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —Å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º –ü–û');
            }
            
            if (domain.includes('scam') || domain.includes('fraud')) {
                reasons.push('–î–æ–º–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω —Å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º');
            }

            if (url.protocol === 'http:') {
                reasons.push('–°–∞–π—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (HTTPS)');
            }

            if (reasons.length > 0) {
                reasonsList.innerHTML = reasons.map(reason => `<li>${reason}</li>`).join('');
                this.debugLog(`üìù Found ${reasons.length} threat indicators`);
            }
        } catch (error) {
            this.debugLog(`‚ùå URL analysis error: ${error.message}`);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async loadStats() {
        this.debugLog('üìä Loading statistics...');
        try {
            if (typeof chrome !== 'undefined' && chrome.storage) {
                const result = await chrome.storage.local.get(['safelink_stats']);
                if (result.safelink_stats) {
                    document.getElementById('blockedCount').textContent = result.safelink_stats.blocked || 0;
                    this.debugLog(`üìà Loaded stats: ${result.safelink_stats.blocked || 0} blocked`);
                }
            } else {
                this.debugLog('‚ö†Ô∏è Chrome storage not available');
                document.getElementById('blockedCount').textContent = '42';
            }
        } catch (error) {
            this.debugLog(`‚ùå Stats loading error: ${error.message}`);
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    attachEventListeners() {
        try {
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            const goBackBtn = document.getElementById('goBackBtn');
            if (goBackBtn) {
                goBackBtn.addEventListener('click', (e) => {
                    this.debugLog('üëÜ Back button clicked');
                    e.preventDefault();
                    this.goBack();
                });
                this.debugLog('‚úÖ Back button listener attached');
            } else {
                this.debugLog('‚ùå Back button not found');
            }

            // –ö–Ω–æ–ø–∫–∞ "–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–∞–π—Ç"
            const allowSiteBtn = document.getElementById('allowSiteBtn');
            if (allowSiteBtn) {
                allowSiteBtn.addEventListener('click', (e) => {
                    this.debugLog('üëÜ Allow button clicked');
                    e.preventDefault();
                    this.allowSite();
                });
                this.debugLog('‚úÖ Allow button listener attached');
            } else {
                this.debugLog('‚ùå Allow button not found');
            }

            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            const continueBtn = document.getElementById('continueBtn');
            if (continueBtn) {
                continueBtn.addEventListener('click', (e) => {
                    this.debugLog('üëÜ Continue button clicked');
                    e.preventDefault();
                    this.continueTo();
                });
                this.debugLog('‚úÖ Continue button listener attached');
            } else {
                this.debugLog('‚ùå Continue button not found');
            }

            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    this.debugLog('‚å®Ô∏è Escape key pressed');
                    this.goBack();
                }
            });
            this.debugLog('‚å®Ô∏è Keyboard shortcuts set up');

        } catch (error) {
            this.debugLog(`‚ùå Event listeners error: ${error.message}`);
        }
    }

    // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
    startCountdown() {
        this.debugLog('‚è∞ Starting countdown...');
        const countdownElement = document.getElementById('countdown');
        const continueBtn = document.getElementById('continueBtn');
        
        if (!countdownElement || !continueBtn) {
            this.debugLog('‚ùå Countdown elements not found');
            return;
        }
        
        continueBtn.disabled = true;
        this.debugLog(`‚è∞ Countdown: ${this.countdown} seconds`);
        
        this.countdownInterval = setInterval(() => {
            this.countdown--;
            countdownElement.textContent = this.countdown;
            
            if (this.countdown <= 0) {
                clearInterval(this.countdownInterval);
                continueBtn.disabled = false;
                continueBtn.innerHTML = '–í—Å—ë —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–π—Ç–∏';
                this.debugLog('‚úÖ Countdown finished, button enabled');
            }
        }, 1000);
    }

    // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
    goBack() {
        this.debugLog('üîô Executing go back...');
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.updateStats('blocked');
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
            if (window.history.length > 1) {
                this.debugLog('üìù Using history.back()');
                window.history.back();
            } else {
                this.debugLog('üìù No history, redirecting to safe page');
                window.location.href = 'https://www.google.com';
            }
        } catch (error) {
            this.debugLog(`‚ùå Go back error: ${error.message}`);
            window.location.href = 'https://www.google.com';
        }
    }

    // –†–∞–∑—Ä–µ—à–∏—Ç—å —Å–∞–π—Ç
    async allowSite() {
        this.debugLog('‚úÖ Allowing site...');
        if (!this.targetUrl) {
            this.debugLog('‚ùå No target URL to allow');
            return;
        }

        try {
            if (typeof chrome !== 'undefined' && chrome.runtime) {
                this.debugLog('üì§ Sending allowSite message to background');
                await chrome.runtime.sendMessage({
                    action: 'allowSite',
                    url: this.targetUrl
                });
                this.debugLog('‚úÖ Allow message sent successfully');
            } else {
                this.debugLog('‚ö†Ô∏è Chrome runtime not available');
            }

            this.debugLog(`üîó Redirecting to: ${this.targetUrl}`);
            window.location.href = this.targetUrl;
        } catch (error) {
            this.debugLog(`‚ùå Allow site error: ${error.message}`);
            // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏
            window.location.href = this.targetUrl;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async updateStats(type) {
        try {
            if (typeof chrome !== 'undefined' && chrome.storage) {
                const result = await chrome.storage.local.get(['safelink_stats']);
                const stats = result.safelink_stats || { blocked: 0, allowed: 0, ignored: 0 };
                stats[type] = (stats[type] || 0) + 1;
                await chrome.storage.local.set({ safelink_stats: stats });
                this.debugLog(`üìä Stats updated: ${type}`);
            }
        } catch (error) {
            this.debugLog(`‚ö†Ô∏è Stats update failed: ${error.message}`);
        }
    }

    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–∞–π—Ç—É
    async continueTo() {
        this.debugLog(`üöÄ Continue to: ${this.targetUrl}`);
        
        if (!this.targetUrl) {
            this.debugLog('‚ùå No target URL');
            alert('Error: No target URL found');
            return;
        }

        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            const proceed = confirm(
                `–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞:\n\n${this.targetUrl}\n\n–≠—Ç–æ—Ç —Å–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω—ã–º!`
            );
            
            if (!proceed) {
                this.debugLog('üö´ User cancelled navigation');
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.updateStats('ignored');

            this.debugLog(`üîó Attempting navigation to: ${this.targetUrl}`);
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "canceled" —Å—Ç–∞—Ç—É—Å–∞
            try {
                // –ú–µ—Ç–æ–¥ 1: Direct window.location replacement
                this.debugLog('üìç Method 1: window.location.replace()');
                window.location.replace(this.targetUrl);
            } catch (replaceError) {
                this.debugLog(`‚ùå Replace failed: ${replaceError.message}`);
                
                try {
                    // –ú–µ—Ç–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º chrome.tabs API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                    if (typeof chrome !== 'undefined' && chrome.tabs) {
                        this.debugLog('üìç Method 2: chrome.tabs.update()');
                        chrome.tabs.getCurrent((tab) => {
                            chrome.tabs.update(tab.id, { url: this.targetUrl });
                        });
                        return;
                    }
                } catch (tabsError) {
                    this.debugLog(`‚ùå Tabs API failed: ${tabsError.message}`);
                }
                
                try {
                    // –ú–µ—Ç–æ–¥ 3: –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –∫–∞–∫ fallback
                    this.debugLog('üìç Method 3: window.open()');
                    window.open(this.targetUrl, '_blank');
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
                    setTimeout(() => window.close(), 1000);
                } catch (openError) {
                    this.debugLog(`‚ùå Window.open failed: ${openError.message}`);
                    
                    // –ú–µ—Ç–æ–¥ 4: –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π href
                    this.debugLog('üìç Method 4: window.location.href (last resort)');
                    window.location.href = this.targetUrl;
                }
            }
            
        } catch (error) {
            this.debugLog(`‚ùå Continue error: ${error.message}`);
            // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π fallback
            try {
                window.location.href = this.targetUrl;
            } catch (fallbackError) {
                this.debugLog(`‚ùå Emergency fallback failed: ${fallbackError.message}`);
                alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç: ${this.targetUrl}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é.`);
            }
        }
    }
}

// Extension-specific debugging function (global)
function debugLog(message) {
    const timestamp = new Date().toLocaleTimeString();
    const debugDiv = document.getElementById('extensionDebug');
    if (debugDiv) {
        debugDiv.innerHTML += `[${timestamp}] ${message}<br>`;
        debugDiv.scrollTop = debugDiv.scrollHeight;
    }
    console.log(`[SafeLink Extension] ${message}`);
}

debugLog('üöÄ Extension warning script starting...');
debugLog(`üìç Location: ${window.location.href}`);
debugLog(`üîß Chrome available: ${typeof chrome !== 'undefined'}`);
debugLog(`üì¶ Runtime available: ${typeof chrome !== 'undefined' && !!chrome.runtime}`);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        debugLog('üåü DOM loaded, creating ExtensionWarningPage');
        window.extensionWarningPage = new ExtensionWarningPage();
    });
} else {
    debugLog('üåü DOM already ready, creating ExtensionWarningPage');
    window.extensionWarningPage = new ExtensionWarningPage();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    debugLog(`üí• JavaScript error: ${event.error.message}`);
});

debugLog('üìÑ Extension warning script loaded'); 