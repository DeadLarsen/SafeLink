// warning-extension.js - JavaScript –¥–ª—è warning-extension.html
// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö

class UrlWarningPage {
    constructor() {
        this.blockedUrl = '';
        this.init();
    }

    debugLog(message) {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = `[${timestamp}] ${message}`;
        console.log(`[SafeLink URL] ${message}`);
        const debugDiv = document.getElementById('extensionDebug');
        if (debugDiv) {
            debugDiv.innerHTML += `${logEntry}<br>`;
            debugDiv.scrollTop = debugDiv.scrollHeight;
        }
    }

    init() {
        this.debugLog('üîÑ Initializing URL warning page...');
        try {
            this.parseUrlParams();
            this.updateInterface();
            this.setupEventListeners();
            this.debugLog('‚úÖ URL warning initialized successfully.');
        } catch (error) {
            this.debugLog(`‚ùå Init error: ${error.message}`);
        }
    }

    parseUrlParams() {
        this.debugLog('üîç Parsing URL parameters...');
        const urlParams = new URLSearchParams(window.location.search);
        this.blockedUrl = urlParams.get('url') || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π URL';
        try {
            this.blockedUrl = decodeURIComponent(this.blockedUrl);
        } catch (e) {
            this.debugLog(`‚ö†Ô∏è Failed to decode URL: ${e.message}`);
        }
        this.debugLog(`üéØ Blocked URL: ${this.blockedUrl}`);
    }

    updateInterface() {
        this.debugLog('üé® Updating interface...');
        const urlElement = document.getElementById('blockedUrl');
        if (urlElement) {
            urlElement.textContent = this.blockedUrl;
        }
    }

    setupEventListeners() {
        this.debugLog('üîß Setting up event listeners...');
        
        document.getElementById('goBackBtn')?.addEventListener('click', () => {
            this.debugLog('üëÜ Back button clicked.');
            this.goBack();
        });

        document.getElementById('allowSiteBtn')?.addEventListener('click', () => {
            this.debugLog('üëÜ Allow site button clicked.');
            this.allowSite();
        });

        const continueBtn = document.getElementById('continueBtn');
        if (continueBtn) {
            continueBtn.disabled = false;
            continueBtn.addEventListener('click', () => {
                this.debugLog('üëÜ Continue button clicked.');
                this.continueToUrl();
            });
        }
    }

    goBack() {
        this.debugLog('üîô Executing go back...');
        this.updateStats('blocked');
        if (window.history.length > 1) {
            window.history.back();
        } else {
            window.location.href = 'https://www.google.com';
        }
    }

    allowSite() {
        this.debugLog(`‚úÖ Allowing site: ${this.blockedUrl}`);
        this.updateStats('allowed');
        if (chrome && chrome.runtime) {
            chrome.runtime.sendMessage({ action: 'allowSite', url: this.blockedUrl }, () => {
                this.debugLog(`üöÄ Redirecting to allowed site: ${this.blockedUrl}`);
                window.location.href = this.blockedUrl;
            });
        }
    }

    continueToUrl() {
        this.debugLog(`üöÄ Continuing to URL: ${this.blockedUrl}`);
        this.updateStats('ignored');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ background
        this.sendMessageRedirect(this.blockedUrl);
    }
    
    sendMessageRedirect(url) {
        this.debugLog(`üîÑ Sending message to background for redirect to: ${url}`);
        
        try {
            if (chrome && chrome.runtime) {
                chrome.runtime.sendMessage({
                    action: 'openUrl',
                    url: url
                }, (response) => {
                    if (chrome.runtime.lastError) {
                        this.debugLog(`‚ùå Background message failed: ${chrome.runtime.lastError.message}`);
                        // –ï—Å–ª–∏ —Ñ–æ–Ω –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥
                        window.location.href = url;
                        return;
                    }
                    
                    if (response && response.success) {
                        this.debugLog('‚úÖ Background script acknowledged. Redirecting...');
                        // –§–æ–Ω —Ä–∞–∑—Ä–µ—à–∏–ª, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å
                        window.location.href = url;
                    } else {
                        this.debugLog(`‚ùå Background script response indicates failure: ${response?.error}`);
                        // –ï—Å–ª–∏ —Ñ–æ–Ω –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–π—Ç–∏
                        window.location.href = url;
                    }
                });
            } else {
                this.debugLog('‚ö†Ô∏è Chrome runtime not available. Using direct redirect.');
                window.location.href = url;
            }
        } catch (error) {
            this.debugLog(`‚ùå Message sending failed: ${error.message}. Using direct redirect.`);
            window.location.href = url;
        }
    }

    updateStats(type) {
        // This can be expanded later if site-specific stats are needed
        this.debugLog(`üìä Updating stats for type: ${type}`);
        if (chrome && chrome.runtime) {
            chrome.runtime.sendMessage({ action: 'updateStats', type: type });
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new UrlWarningPage();
}); 