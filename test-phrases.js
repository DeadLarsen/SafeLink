// test-phrases.js - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ñ—Ä–∞–∑

class PhraseTester {
    constructor() {
        this.blockedPhrases = ['—Ç–µ—Å—Ç–æ'];
        this.safePhrases = [
            '–ø–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞',
            '—Ä–µ—Ü–µ–ø—Ç –±–æ—Ä—â–∞',
            '–∫–∞–∫ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π',
            '–∫—É–ø–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω',
            '–Ω–æ–≤–æ—Å—Ç–∏ —Å–ø–æ—Ä—Ç–∞',
            '—Ñ–∏–ª—å–º—ã 2024',
            '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ javascript',
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ —Ä–æ—Å—Å–∏–∏'
        ];
        
        this.searchEngines = {
            'google': 'https://www.google.com/search?q=',
            'yandex': 'https://yandex.ru/search/?text=',
            'bing': 'https://www.bing.com/search?q=',
            'mail': 'https://go.mail.ru/search?q='
        };
        
        this.init();
    }

    debugLog(message) {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = `[${timestamp}] ${message}`;
        console.log(`[PhraseTester] ${message}`);

        const debugDiv = document.getElementById('debugLog');
        if (debugDiv) {
            debugDiv.innerHTML += `${logEntry}<br>`;
            debugDiv.scrollTop = debugDiv.scrollHeight;
        }
    }

    async init() {
        this.debugLog('üöÄ Initializing phrase tester...');
        
        try {
            await this.loadBlockedPhrases();
            this.renderTestPhrases();
            this.loadStats();
            this.setupEventListeners();
            
            this.debugLog('‚úÖ Phrase tester initialized successfully');
        } catch (error) {
            this.debugLog(`‚ùå Initialization error: ${error.message}`);
        }
    }

    async loadBlockedPhrases() {
        this.debugLog('üì• Loading blocked phrases...');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ blocked-phrases.json
            const response = await fetch(chrome.runtime.getURL('blocked-phrases.json'));
            const data = await response.json();
            
            // –ë–µ—Ä–µ–º –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—Ä–∞–∑ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const testPhrases = [];
            
            if (data.categories) {
                Object.entries(data.categories).forEach(([category, phrases]) => {
                    if (phrases && phrases.length > 0) {
                        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ—Ä–∞–∑—ã –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        testPhrases.push(...phrases.slice(0, 3).map(phrase => ({
                            text: phrase,
                            category: category
                        })));
                    }
                });
            }
            
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (testPhrases.length === 0) {
                this.blockedPhrases = [
                    { text: '—ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', category: 'organizations' },
                    { text: '–∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞', category: 'books' },
                    { text: '—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç', category: 'websites' },
                    { text: '–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∂—É—Ä–Ω–∞–ª', category: 'magazines' }
                ];
            } else {
                this.blockedPhrases = testPhrases.slice(0, 12); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            }
            
            this.debugLog(`üìã Loaded ${this.blockedPhrases.length} test phrases`);
            
        } catch (error) {
            this.debugLog(`‚ö†Ô∏è Error loading phrases: ${error.message}`);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            this.blockedPhrases = [
                { text: '—Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞', category: 'general' },
                { text: '—ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª', category: 'general' }
            ];
        }
    }

    renderTestPhrases() {
        this.debugLog('üé® Rendering test phrases...');
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        const blockedContainer = document.getElementById('blockedPhrases');
        if (blockedContainer) {
            blockedContainer.innerHTML = '';
            
            this.blockedPhrases.forEach((phrase, index) => {
                const phraseElement = document.createElement('div');
                phraseElement.className = 'phrase-item blocked';
                phraseElement.innerHTML = `
                    <div class="phrase-text">${phrase.text}</div>
                    <div class="phrase-category">${this.getCategoryDisplayName(phrase.category)}</div>
                `;
                phraseElement.onclick = () => this.testPhrase(phrase.text, true);
                blockedContainer.appendChild(phraseElement);
            });
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        const safeContainer = document.getElementById('safePhrases');
        if (safeContainer) {
            safeContainer.innerHTML = '';
            
            this.safePhrases.forEach((phrase, index) => {
                const phraseElement = document.createElement('div');
                phraseElement.className = 'phrase-item';
                phraseElement.innerHTML = `
                    <div class="phrase-text">${phrase}</div>
                    <div class="phrase-category">–±–µ–∑–æ–ø–∞—Å–Ω–∞—è</div>
                `;
                phraseElement.onclick = () => this.testPhrase(phrase, false);
                safeContainer.appendChild(phraseElement);
            });
        }
        
        this.debugLog('‚úÖ Test phrases rendered');
    }

    getCategoryDisplayName(category) {
        const categories = {
            'books': '–∫–Ω–∏–≥–∏',
            'websites': '—Å–∞–π—Ç—ã',
            'magazines': '–∂—É—Ä–Ω–∞–ª—ã',
            'videos': '–≤–∏–¥–µ–æ',
            'organizations': '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
            'general': '–æ–±—â–∞—è'
        };
        
        return categories[category] || '–æ–±—â–∞—è';
    }

    async loadStats() {
        this.debugLog('üìä Loading statistics...');
        
        try {
            let stats = { blocked: 0, ignored: 0 };
            
            if (typeof chrome !== 'undefined' && chrome.runtime) {
                try {
                    stats = await chrome.runtime.sendMessage({ action: 'getPhraseStats' });
                } catch (error) {
                    this.debugLog(`‚ö†Ô∏è Failed to get stats from background: ${error.message}`);
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ storage
                    const result = await chrome.storage.local.get(['safelink_phrase_stats']);
                    stats = result.safelink_phrase_stats || { blocked: 0, ignored: 0 };
                }
            }
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.renderStats(stats);
            
        } catch (error) {
            this.debugLog(`‚ùå Error loading stats: ${error.message}`);
            this.renderStats({ blocked: 0, ignored: 0 });
        }
    }

    renderStats(stats) {
        const statsContainer = document.getElementById('statsGrid');
        if (!statsContainer) return;
        
        statsContainer.innerHTML = `
            <div class="stat-card">
                <div class="stat-number">${stats.blocked || 0}</div>
                <div class="stat-label">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${stats.ignored || 0}</div>
                <div class="stat-label">–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${this.blockedPhrases.length}</div>
                <div class="stat-label">–¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–∑</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${this.safePhrases.length}</div>
                <div class="stat-label">–ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ—Ä–∞–∑</div>
            </div>
        `;
    }

    setupEventListeners() {
        this.debugLog('üîß Setting up event listeners...');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        const manualInput = document.getElementById('manualQuery');
        if (manualInput) {
            manualInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.testManualSearch();
                }
            });
        }
        
        // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
        window.testManualSearch = () => this.testManualSearch();
        
        this.debugLog('‚úÖ Event listeners set up');
    }

    async testPhrase(phrase, shouldBeBlocked) {
        this.debugLog(`üß™ Testing phrase: "${phrase}" (should be ${shouldBeBlocked ? 'blocked' : 'safe'})`);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—É —á–µ—Ä–µ–∑ background script
            let isBlocked = false;
            
            if (typeof chrome !== 'undefined' && chrome.runtime) {
                try {
                    const result = await chrome.runtime.sendMessage({
                        action: 'checkPhrase',
                        phrase: phrase
                    });
                    isBlocked = result.blocked;
                    this.debugLog(`üìã Background check result: ${isBlocked ? 'blocked' : 'allowed'}`);
                } catch (error) {
                    this.debugLog(`‚ö†Ô∏è Background check failed: ${error.message}`);
                }
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π URL
            const engine = document.getElementById('engineSelect')?.value || 'google';
            const searchUrl = this.searchEngines[engine] + encodeURIComponent(phrase);
            
            if (isBlocked && shouldBeBlocked) {
                this.debugLog(`‚úÖ Correct: Phrase correctly blocked`);
                this.showAlert(`‚úÖ –§—Ä–∞–∑–∞ "${phrase}" –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞`, 'success');
            } else if (!isBlocked && !shouldBeBlocked) {
                this.debugLog(`‚úÖ Correct: Phrase correctly allowed`);
                this.showAlert(`‚úÖ –§—Ä–∞–∑–∞ "${phrase}" –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞`, 'success');
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É
                window.open(searchUrl, '_blank');
            } else if (isBlocked && !shouldBeBlocked) {
                this.debugLog(`‚ùå False positive: Safe phrase was blocked`);
                this.showAlert(`‚ùå –õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—Ä–∞–∑–∞ "${phrase}" –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞`, 'warning');
            } else {
                this.debugLog(`‚ùå False negative: Blocked phrase was allowed`);
                this.showAlert(`‚ùå –ü—Ä–æ–ø—É—Å–∫: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ "${phrase}" –±—ã–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞`, 'warning');
                // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
                window.open(searchUrl, '_blank');
            }
            
        } catch (error) {
            this.debugLog(`‚ùå Test error: ${error.message}`);
            this.showAlert(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'warning');
        }
    }

    testManualSearch() {
        const queryInput = document.getElementById('manualQuery');
        const engineSelect = document.getElementById('engineSelect');
        
        if (!queryInput || !engineSelect) {
            this.debugLog('‚ùå Input elements not found');
            return;
        }
        
        const query = queryInput.value.trim();
        const engine = engineSelect.value;
        
        if (!query) {
            this.showAlert('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', 'warning');
            return;
        }
        
        this.debugLog(`üîç Manual search test: "${query}" on ${engine}`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
        this.testPhrase(query, null); // null –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –º—ã –Ω–µ –∑–Ω–∞–µ–º –¥–æ–ª–∂–Ω–∞ –ª–∏ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    }

    showAlert(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π alert
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert ${type}`;
        alertDiv.textContent = message;
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const container = document.querySelector('.container');
        const firstSection = container.querySelector('.test-section');
        container.insertBefore(alertDiv, firstSection);
        
        // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 5000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('üåü DOM loaded, creating PhraseTester');
        window.phraseTester = new PhraseTester();
    });
} else {
    console.log('üåü DOM already ready, creating PhraseTester');
    window.phraseTester = new PhraseTester();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error(`üí• JavaScript error: ${event.error.message}`);
}); 